# Generated from /workspaces/qutes_lang/specification/grammar/qutes_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,48,474,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,
        4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,
        1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,
        1,37,1,37,5,37,261,8,37,10,37,12,37,264,9,37,1,37,1,37,1,37,1,37,
        1,37,1,37,5,37,272,8,37,10,37,12,37,275,9,37,3,37,277,8,37,1,38,
        1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,41,
        1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        3,42,306,8,42,1,43,1,43,3,43,310,8,43,1,44,4,44,313,8,44,11,44,12,
        44,314,1,45,3,45,318,8,45,1,45,4,45,321,8,45,11,45,12,45,322,1,45,
        1,45,5,45,327,8,45,10,45,12,45,330,9,45,1,45,3,45,333,8,45,1,45,
        1,45,4,45,337,8,45,11,45,12,45,338,3,45,341,8,45,1,46,1,46,1,46,
        1,46,4,46,347,8,46,11,46,12,46,348,1,47,1,47,1,47,4,47,354,8,47,
        11,47,12,47,355,1,48,1,48,1,48,3,48,361,8,48,1,48,1,48,5,48,365,
        8,48,10,48,12,48,368,9,48,1,48,1,48,3,48,372,8,48,3,48,374,8,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,386,8,48,
        1,48,1,48,3,48,390,8,48,1,48,3,48,393,8,48,1,49,1,49,1,49,1,49,1,
        49,5,49,400,8,49,10,49,12,49,403,9,49,1,49,1,49,5,49,407,8,49,10,
        49,12,49,410,9,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,418,8,49,10,
        49,12,49,421,9,49,1,49,1,49,3,49,425,8,49,1,49,1,49,1,49,1,49,3,
        49,431,8,49,1,49,4,49,434,8,49,11,49,12,49,435,1,49,1,49,3,49,440,
        8,49,1,50,4,50,443,8,50,11,50,12,50,444,1,51,1,51,1,51,1,51,1,51,
        1,51,5,51,453,8,51,10,51,12,51,456,9,51,1,51,1,51,1,52,4,52,461,
        8,52,11,52,12,52,462,1,52,3,52,466,8,52,1,52,1,52,1,53,3,53,471,
        8,53,1,53,1,53,1,262,0,54,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,73,37,75,0,77,0,79,0,81,0,83,0,
        85,0,87,38,89,39,91,40,93,41,95,42,97,43,99,44,101,45,103,46,105,
        47,107,48,1,0,31,2,0,73,73,105,105,2,0,78,78,110,110,2,0,84,84,116,
        116,2,0,66,66,98,98,2,0,79,79,111,111,2,0,76,76,108,108,2,0,83,83,
        115,115,2,0,82,82,114,114,2,0,71,71,103,103,2,0,81,81,113,113,2,
        0,85,85,117,117,2,0,70,70,102,102,2,0,65,65,97,97,2,0,86,86,118,
        118,2,0,68,68,100,100,2,0,69,69,101,101,2,0,80,80,112,112,2,0,89,
        89,121,121,2,0,90,90,122,122,2,0,72,72,104,104,2,0,77,77,109,109,
        2,0,87,87,119,119,2,0,10,10,13,13,1,0,48,57,2,0,43,43,45,45,2,0,
        88,88,120,120,2,0,65,70,97,102,1,0,48,49,3,0,48,57,65,90,97,122,
        2,0,34,34,92,92,3,0,9,10,13,13,32,32,509,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,
        45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,
        55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,
        65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,
        87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,
        97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,
        0,0,107,1,0,0,0,1,109,1,0,0,0,3,113,1,0,0,0,5,118,1,0,0,0,7,125,
        1,0,0,0,9,131,1,0,0,0,11,137,1,0,0,0,13,143,1,0,0,0,15,148,1,0,0,
        0,17,155,1,0,0,0,19,157,1,0,0,0,21,159,1,0,0,0,23,163,1,0,0,0,25,
        170,1,0,0,0,27,177,1,0,0,0,29,186,1,0,0,0,31,194,1,0,0,0,33,200,
        1,0,0,0,35,203,1,0,0,0,37,205,1,0,0,0,39,208,1,0,0,0,41,210,1,0,
        0,0,43,213,1,0,0,0,45,215,1,0,0,0,47,217,1,0,0,0,49,221,1,0,0,0,
        51,224,1,0,0,0,53,229,1,0,0,0,55,235,1,0,0,0,57,238,1,0,0,0,59,240,
        1,0,0,0,61,242,1,0,0,0,63,244,1,0,0,0,65,246,1,0,0,0,67,248,1,0,
        0,0,69,250,1,0,0,0,71,252,1,0,0,0,73,254,1,0,0,0,75,276,1,0,0,0,
        77,278,1,0,0,0,79,283,1,0,0,0,81,289,1,0,0,0,83,291,1,0,0,0,85,305,
        1,0,0,0,87,309,1,0,0,0,89,312,1,0,0,0,91,340,1,0,0,0,93,342,1,0,
        0,0,95,350,1,0,0,0,97,392,1,0,0,0,99,439,1,0,0,0,101,442,1,0,0,0,
        103,446,1,0,0,0,105,465,1,0,0,0,107,470,1,0,0,0,109,110,7,0,0,0,
        110,111,7,1,0,0,111,112,7,2,0,0,112,2,1,0,0,0,113,114,7,3,0,0,114,
        115,7,4,0,0,115,116,7,4,0,0,116,117,7,5,0,0,117,4,1,0,0,0,118,119,
        7,6,0,0,119,120,7,2,0,0,120,121,7,7,0,0,121,122,7,0,0,0,122,123,
        7,1,0,0,123,124,7,8,0,0,124,6,1,0,0,0,125,126,7,9,0,0,126,127,7,
        10,0,0,127,128,7,3,0,0,128,129,7,0,0,0,129,130,7,2,0,0,130,8,1,0,
        0,0,131,132,7,9,0,0,132,133,7,10,0,0,133,134,7,0,0,0,134,135,7,1,
        0,0,135,136,7,2,0,0,136,10,1,0,0,0,137,138,7,11,0,0,138,139,7,5,
        0,0,139,140,7,4,0,0,140,141,7,12,0,0,141,142,7,2,0,0,142,12,1,0,
        0,0,143,144,7,13,0,0,144,145,7,4,0,0,145,146,7,0,0,0,146,147,7,14,
        0,0,147,14,1,0,0,0,148,149,7,7,0,0,149,150,7,15,0,0,150,151,7,2,
        0,0,151,152,7,10,0,0,152,153,7,7,0,0,153,154,7,1,0,0,154,16,1,0,
        0,0,155,156,5,43,0,0,156,18,1,0,0,0,157,158,5,45,0,0,158,20,1,0,
        0,0,159,160,7,1,0,0,160,161,7,4,0,0,161,162,7,2,0,0,162,22,1,0,0,
        0,163,164,7,16,0,0,164,165,7,12,0,0,165,166,7,10,0,0,166,167,7,5,
        0,0,167,168,7,0,0,0,168,169,7,17,0,0,169,24,1,0,0,0,170,171,7,16,
        0,0,171,172,7,12,0,0,172,173,7,10,0,0,173,174,7,5,0,0,174,175,7,
        0,0,0,175,176,7,18,0,0,176,26,1,0,0,0,177,178,7,19,0,0,178,179,7,
        12,0,0,179,180,7,14,0,0,180,181,7,12,0,0,181,182,7,20,0,0,182,183,
        7,12,0,0,183,184,7,7,0,0,184,185,7,14,0,0,185,28,1,0,0,0,186,187,
        7,20,0,0,187,188,7,15,0,0,188,189,7,12,0,0,189,190,7,6,0,0,190,191,
        7,10,0,0,191,192,7,7,0,0,192,193,7,15,0,0,193,30,1,0,0,0,194,195,
        7,16,0,0,195,196,7,7,0,0,196,197,7,0,0,0,197,198,7,1,0,0,198,199,
        7,2,0,0,199,32,1,0,0,0,200,201,5,61,0,0,201,202,5,61,0,0,202,34,
        1,0,0,0,203,204,5,62,0,0,204,36,1,0,0,0,205,206,5,62,0,0,206,207,
        5,61,0,0,207,38,1,0,0,0,208,209,5,60,0,0,209,40,1,0,0,0,210,211,
        5,60,0,0,211,212,5,61,0,0,212,42,1,0,0,0,213,214,5,61,0,0,214,44,
        1,0,0,0,215,216,5,59,0,0,216,46,1,0,0,0,217,218,7,13,0,0,218,219,
        7,12,0,0,219,220,7,7,0,0,220,48,1,0,0,0,221,222,7,0,0,0,222,223,
        7,11,0,0,223,50,1,0,0,0,224,225,7,15,0,0,225,226,7,5,0,0,226,227,
        7,6,0,0,227,228,7,15,0,0,228,52,1,0,0,0,229,230,7,21,0,0,230,231,
        7,19,0,0,231,232,7,0,0,0,232,233,7,5,0,0,233,234,7,15,0,0,234,54,
        1,0,0,0,235,236,7,14,0,0,236,237,7,4,0,0,237,56,1,0,0,0,238,239,
        5,123,0,0,239,58,1,0,0,0,240,241,5,125,0,0,241,60,1,0,0,0,242,243,
        5,40,0,0,243,62,1,0,0,0,244,245,5,41,0,0,245,64,1,0,0,0,246,247,
        5,91,0,0,247,66,1,0,0,0,248,249,5,93,0,0,249,68,1,0,0,0,250,251,
        5,46,0,0,251,70,1,0,0,0,252,253,5,34,0,0,253,72,1,0,0,0,254,255,
        5,44,0,0,255,74,1,0,0,0,256,257,5,47,0,0,257,258,5,42,0,0,258,262,
        1,0,0,0,259,261,9,0,0,0,260,259,1,0,0,0,261,264,1,0,0,0,262,263,
        1,0,0,0,262,260,1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,266,
        5,42,0,0,266,277,5,47,0,0,267,268,5,47,0,0,268,269,5,47,0,0,269,
        273,1,0,0,0,270,272,8,22,0,0,271,270,1,0,0,0,272,275,1,0,0,0,273,
        271,1,0,0,0,273,274,1,0,0,0,274,277,1,0,0,0,275,273,1,0,0,0,276,
        256,1,0,0,0,276,267,1,0,0,0,277,76,1,0,0,0,278,279,7,2,0,0,279,280,
        7,7,0,0,280,281,7,10,0,0,281,282,7,15,0,0,282,78,1,0,0,0,283,284,
        7,11,0,0,284,285,7,12,0,0,285,286,7,5,0,0,286,287,7,6,0,0,287,288,
        7,15,0,0,288,80,1,0,0,0,289,290,7,23,0,0,290,82,1,0,0,0,291,292,
        7,24,0,0,292,84,1,0,0,0,293,294,5,124,0,0,294,295,5,48,0,0,295,306,
        5,62,0,0,296,297,5,124,0,0,297,298,5,49,0,0,298,306,5,62,0,0,299,
        300,5,124,0,0,300,301,5,43,0,0,301,306,5,62,0,0,302,303,5,124,0,
        0,303,304,5,45,0,0,304,306,5,62,0,0,305,293,1,0,0,0,305,296,1,0,
        0,0,305,299,1,0,0,0,305,302,1,0,0,0,306,86,1,0,0,0,307,310,3,77,
        38,0,308,310,3,79,39,0,309,307,1,0,0,0,309,308,1,0,0,0,310,88,1,
        0,0,0,311,313,3,81,40,0,312,311,1,0,0,0,313,314,1,0,0,0,314,312,
        1,0,0,0,314,315,1,0,0,0,315,90,1,0,0,0,316,318,3,83,41,0,317,316,
        1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,3,81,40,0,320,319,
        1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,1,0,0,0,323,324,
        1,0,0,0,324,328,5,46,0,0,325,327,3,81,40,0,326,325,1,0,0,0,327,330,
        1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,329,341,1,0,0,0,330,328,
        1,0,0,0,331,333,3,83,41,0,332,331,1,0,0,0,332,333,1,0,0,0,333,334,
        1,0,0,0,334,336,5,46,0,0,335,337,3,81,40,0,336,335,1,0,0,0,337,338,
        1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,317,
        1,0,0,0,340,332,1,0,0,0,341,92,1,0,0,0,342,343,5,48,0,0,343,346,
        7,25,0,0,344,347,7,26,0,0,345,347,3,81,40,0,346,344,1,0,0,0,346,
        345,1,0,0,0,347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,
        94,1,0,0,0,350,351,5,48,0,0,351,353,7,3,0,0,352,354,7,27,0,0,353,
        352,1,0,0,0,354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,
        96,1,0,0,0,357,360,3,65,32,0,358,361,3,87,43,0,359,361,2,48,49,0,
        360,358,1,0,0,0,360,359,1,0,0,0,361,373,1,0,0,0,362,366,3,73,36,
        0,363,365,5,32,0,0,364,363,1,0,0,0,365,368,1,0,0,0,366,364,1,0,0,
        0,366,367,1,0,0,0,367,371,1,0,0,0,368,366,1,0,0,0,369,372,3,87,43,
        0,370,372,2,48,49,0,371,369,1,0,0,0,371,370,1,0,0,0,372,374,1,0,
        0,0,373,362,1,0,0,0,373,374,1,0,0,0,374,375,1,0,0,0,375,376,3,67,
        33,0,376,377,7,9,0,0,377,393,1,0,0,0,378,379,3,91,45,0,379,380,3,
        73,36,0,380,381,3,91,45,0,381,382,7,9,0,0,382,393,1,0,0,0,383,393,
        3,85,42,0,384,386,3,83,41,0,385,384,1,0,0,0,385,386,1,0,0,0,386,
        389,1,0,0,0,387,390,3,87,43,0,388,390,2,48,49,0,389,387,1,0,0,0,
        389,388,1,0,0,0,390,391,1,0,0,0,391,393,7,9,0,0,392,357,1,0,0,0,
        392,378,1,0,0,0,392,383,1,0,0,0,392,385,1,0,0,0,393,98,1,0,0,0,394,
        440,3,97,48,0,395,396,3,65,32,0,396,408,3,97,48,0,397,401,3,73,36,
        0,398,400,5,32,0,0,399,398,1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,
        0,401,402,1,0,0,0,402,404,1,0,0,0,403,401,1,0,0,0,404,405,3,97,48,
        0,405,407,1,0,0,0,406,397,1,0,0,0,407,410,1,0,0,0,408,406,1,0,0,
        0,408,409,1,0,0,0,409,411,1,0,0,0,410,408,1,0,0,0,411,412,3,67,33,
        0,412,440,1,0,0,0,413,414,3,65,32,0,414,424,3,89,44,0,415,419,3,
        73,36,0,416,418,5,32,0,0,417,416,1,0,0,0,418,421,1,0,0,0,419,417,
        1,0,0,0,419,420,1,0,0,0,420,422,1,0,0,0,421,419,1,0,0,0,422,423,
        3,89,44,0,423,425,1,0,0,0,424,415,1,0,0,0,424,425,1,0,0,0,425,426,
        1,0,0,0,426,427,3,67,33,0,427,428,7,9,0,0,428,440,1,0,0,0,429,431,
        3,83,41,0,430,429,1,0,0,0,430,431,1,0,0,0,431,433,1,0,0,0,432,434,
        3,81,40,0,433,432,1,0,0,0,434,435,1,0,0,0,435,433,1,0,0,0,435,436,
        1,0,0,0,436,437,1,0,0,0,437,438,7,9,0,0,438,440,1,0,0,0,439,394,
        1,0,0,0,439,395,1,0,0,0,439,413,1,0,0,0,439,430,1,0,0,0,440,100,
        1,0,0,0,441,443,7,28,0,0,442,441,1,0,0,0,443,444,1,0,0,0,444,442,
        1,0,0,0,444,445,1,0,0,0,445,102,1,0,0,0,446,454,5,34,0,0,447,448,
        5,92,0,0,448,453,9,0,0,0,449,450,5,34,0,0,450,453,5,34,0,0,451,453,
        8,29,0,0,452,447,1,0,0,0,452,449,1,0,0,0,452,451,1,0,0,0,453,456,
        1,0,0,0,454,452,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,454,
        1,0,0,0,457,458,5,34,0,0,458,104,1,0,0,0,459,461,7,30,0,0,460,459,
        1,0,0,0,461,462,1,0,0,0,462,460,1,0,0,0,462,463,1,0,0,0,463,466,
        1,0,0,0,464,466,3,75,37,0,465,460,1,0,0,0,465,464,1,0,0,0,466,467,
        1,0,0,0,467,468,6,52,0,0,468,106,1,0,0,0,469,471,5,13,0,0,470,469,
        1,0,0,0,470,471,1,0,0,0,471,472,1,0,0,0,472,473,5,10,0,0,473,108,
        1,0,0,0,36,0,262,273,276,305,309,314,317,322,328,332,338,340,346,
        348,355,360,366,371,373,385,389,392,401,408,419,424,430,435,439,
        444,452,454,462,465,470,1,6,0,0
    ]

class qutes_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_TYPE = 1
    BOOL_TYPE = 2
    STRING_TYPE = 3
    QUBIT_TYPE = 4
    QUINT_TYPE = 5
    FLOAT_TYPE = 6
    VOID_TYPE = 7
    RETURN = 8
    ADD = 9
    SUB = 10
    NOT = 11
    PAULIY = 12
    PAULIZ = 13
    HADAMARD = 14
    MEASURE = 15
    PRINT = 16
    EQUAL = 17
    GREATER = 18
    GREATEREQUAL = 19
    LOWER = 20
    LOWEREQUAL = 21
    ASSIGN = 22
    END_OF_STATEMENT = 23
    VAR_STATEMENT = 24
    IF_STATEMENT = 25
    ELSE_STATEMENT = 26
    WHILE_STATEMENT = 27
    DO_STATEMENT = 28
    CURLY_PARENTHESIS_OPEN = 29
    CURLY_PARENTHESIS_CLOSE = 30
    ROUND_PARENTHESIS_OPEN = 31
    ROUND_PARENTHESIS_CLOSE = 32
    SQUARE_PARENTHESIS_OPEN = 33
    SQUARE_PARENTHESIS_CLOSE = 34
    DOT = 35
    STRING_ENCLOSURE = 36
    COMMA = 37
    BOOL_LITERAL = 38
    INT_LITERAL = 39
    FLOAT_LITERAL = 40
    HEX_LITERAL = 41
    BIN_LITERAL = 42
    QUBIT_LITERAL = 43
    QUINT_LITERAL = 44
    SYMBOL_LITERAL = 45
    STRING_LITERAL = 46
    WS = 47
    NEWLINE = 48

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'bool'", "'string'", "'qubit'", "'quint'", "'float'", 
            "'void'", "'return'", "'+'", "'-'", "'not'", "'pauliy'", "'pauliz'", 
            "'hadamard'", "'measure'", "'print'", "'=='", "'>'", "'>='", 
            "'<'", "'<='", "'='", "';'", "'var'", "'if'", "'else'", "'while'", 
            "'do'", "'{'", "'}'", "'('", "')'", "'['", "']'", "'.'", "'\"'", 
            "','" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", "QUINT_TYPE", 
            "FLOAT_TYPE", "VOID_TYPE", "RETURN", "ADD", "SUB", "NOT", "PAULIY", 
            "PAULIZ", "HADAMARD", "MEASURE", "PRINT", "EQUAL", "GREATER", 
            "GREATEREQUAL", "LOWER", "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", 
            "VAR_STATEMENT", "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", 
            "DO_STATEMENT", "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", 
            "ROUND_PARENTHESIS_OPEN", "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
            "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", "COMMA", 
            "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", "HEX_LITERAL", 
            "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", "SYMBOL_LITERAL", 
            "STRING_LITERAL", "WS", "NEWLINE" ]

    ruleNames = [ "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", 
                  "QUINT_TYPE", "FLOAT_TYPE", "VOID_TYPE", "RETURN", "ADD", 
                  "SUB", "NOT", "PAULIY", "PAULIZ", "HADAMARD", "MEASURE", 
                  "PRINT", "EQUAL", "GREATER", "GREATEREQUAL", "LOWER", 
                  "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", "VAR_STATEMENT", 
                  "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
                  "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
                  "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
                  "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", 
                  "COMMA", "COMMENT", "TRUE", "FALSE", "DIGIT", "MATH_SIGN", 
                  "QUBIT_STANDARD", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", 
                  "SYMBOL_LITERAL", "STRING_LITERAL", "WS", "NEWLINE" ]

    grammarFileName = "qutes_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


