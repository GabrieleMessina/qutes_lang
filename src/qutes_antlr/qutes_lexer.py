# Generated from /workspaces/qutes_lang/specification/grammar/qutes_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,75,645,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,
        65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,
        71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
        78,7,78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,
        1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,
        1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,1,14,1,15,
        1,15,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,
        1,33,1,33,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,37,1,38,
        1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,
        1,42,1,43,1,43,1,43,1,44,1,44,1,45,1,45,1,45,1,45,1,46,1,46,1,46,
        1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,
        1,49,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,
        1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,54,1,54,1,55,1,55,1,56,
        1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,1,62,
        1,63,1,63,1,63,1,63,5,63,420,8,63,10,63,12,63,423,9,63,1,63,1,63,
        1,63,1,63,1,63,1,63,5,63,431,8,63,10,63,12,63,434,9,63,3,63,436,
        8,63,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,1,66,
        1,66,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,3,68,465,8,68,1,69,1,69,1,69,3,69,470,8,69,1,70,3,70,473,
        8,70,1,70,4,70,476,8,70,11,70,12,70,477,1,71,3,71,481,8,71,1,71,
        4,71,484,8,71,11,71,12,71,485,1,71,1,71,5,71,490,8,71,10,71,12,71,
        493,9,71,1,71,3,71,496,8,71,1,71,1,71,4,71,500,8,71,11,71,12,71,
        501,3,71,504,8,71,1,72,1,72,1,72,1,72,4,72,510,8,72,11,72,12,72,
        511,1,73,1,73,1,73,4,73,517,8,73,11,73,12,73,518,1,74,1,74,1,74,
        3,74,524,8,74,1,74,1,74,5,74,528,8,74,10,74,12,74,531,9,74,1,74,
        1,74,3,74,535,8,74,3,74,537,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,
        74,1,74,1,74,1,74,3,74,549,8,74,1,74,1,74,3,74,553,8,74,1,74,3,74,
        556,8,74,1,75,1,75,1,75,1,75,1,75,5,75,563,8,75,10,75,12,75,566,
        9,75,1,75,1,75,5,75,570,8,75,10,75,12,75,573,9,75,1,75,1,75,1,75,
        1,75,1,75,1,75,5,75,581,8,75,10,75,12,75,584,9,75,1,75,1,75,5,75,
        588,8,75,10,75,12,75,591,9,75,1,75,1,75,1,75,1,75,3,75,597,8,75,
        1,75,4,75,600,8,75,11,75,12,75,601,1,75,1,75,3,75,606,8,75,1,76,
        1,76,1,76,1,77,1,77,5,77,613,8,77,10,77,12,77,616,9,77,1,78,1,78,
        1,78,1,78,1,78,1,78,5,78,624,8,78,10,78,12,78,627,9,78,1,78,1,78,
        1,79,4,79,632,8,79,11,79,12,79,633,1,79,3,79,637,8,79,1,79,1,79,
        1,80,3,80,642,8,80,1,80,1,80,1,421,0,81,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,
        51,103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,
        121,61,123,62,125,63,127,0,129,0,131,0,133,0,135,0,137,0,139,64,
        141,65,143,66,145,67,147,68,149,69,151,70,153,71,155,72,157,73,159,
        74,161,75,1,0,33,2,0,73,73,105,105,2,0,78,78,110,110,2,0,84,84,116,
        116,2,0,66,66,98,98,2,0,79,79,111,111,2,0,76,76,108,108,2,0,83,83,
        115,115,2,0,82,82,114,114,2,0,71,71,103,103,2,0,81,81,113,113,2,
        0,85,85,117,117,2,0,70,70,102,102,2,0,65,65,97,97,2,0,86,86,118,
        118,2,0,68,68,100,100,2,0,69,69,101,101,2,0,89,89,121,121,2,0,87,
        87,119,119,2,0,80,80,112,112,2,0,90,90,122,122,2,0,77,77,109,109,
        2,0,67,67,99,99,2,0,88,88,120,120,2,0,72,72,104,104,2,0,10,10,13,
        13,1,0,48,57,2,0,43,43,45,45,2,0,65,70,97,102,1,0,48,49,3,0,65,90,
        95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,92,92,3,0,9,
        10,13,13,32,32,682,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,
        0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,
        0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,
        117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,
        0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,
        1,0,0,0,0,149,1,0,0,0,0,151,1,0,0,0,0,153,1,0,0,0,0,155,1,0,0,0,
        0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,0,0,1,163,1,0,0,0,3,167,1,
        0,0,0,5,172,1,0,0,0,7,179,1,0,0,0,9,185,1,0,0,0,11,191,1,0,0,0,13,
        200,1,0,0,0,15,206,1,0,0,0,17,211,1,0,0,0,19,218,1,0,0,0,21,220,
        1,0,0,0,23,222,1,0,0,0,25,224,1,0,0,0,27,226,1,0,0,0,29,228,1,0,
        0,0,31,232,1,0,0,0,33,236,1,0,0,0,35,239,1,0,0,0,37,242,1,0,0,0,
        39,247,1,0,0,0,41,254,1,0,0,0,43,261,1,0,0,0,45,268,1,0,0,0,47,272,
        1,0,0,0,49,276,1,0,0,0,51,280,1,0,0,0,53,284,1,0,0,0,55,293,1,0,
        0,0,57,301,1,0,0,0,59,307,1,0,0,0,61,315,1,0,0,0,63,318,1,0,0,0,
        65,321,1,0,0,0,67,323,1,0,0,0,69,326,1,0,0,0,71,328,1,0,0,0,73,331,
        1,0,0,0,75,333,1,0,0,0,77,336,1,0,0,0,79,339,1,0,0,0,81,342,1,0,
        0,0,83,345,1,0,0,0,85,348,1,0,0,0,87,351,1,0,0,0,89,354,1,0,0,0,
        91,356,1,0,0,0,93,360,1,0,0,0,95,364,1,0,0,0,97,371,1,0,0,0,99,374,
        1,0,0,0,101,380,1,0,0,0,103,383,1,0,0,0,105,388,1,0,0,0,107,394,
        1,0,0,0,109,397,1,0,0,0,111,399,1,0,0,0,113,401,1,0,0,0,115,403,
        1,0,0,0,117,405,1,0,0,0,119,407,1,0,0,0,121,409,1,0,0,0,123,411,
        1,0,0,0,125,413,1,0,0,0,127,435,1,0,0,0,129,437,1,0,0,0,131,442,
        1,0,0,0,133,448,1,0,0,0,135,450,1,0,0,0,137,464,1,0,0,0,139,469,
        1,0,0,0,141,472,1,0,0,0,143,503,1,0,0,0,145,505,1,0,0,0,147,513,
        1,0,0,0,149,555,1,0,0,0,151,605,1,0,0,0,153,607,1,0,0,0,155,610,
        1,0,0,0,157,617,1,0,0,0,159,636,1,0,0,0,161,641,1,0,0,0,163,164,
        7,0,0,0,164,165,7,1,0,0,165,166,7,2,0,0,166,2,1,0,0,0,167,168,7,
        3,0,0,168,169,7,4,0,0,169,170,7,4,0,0,170,171,7,5,0,0,171,4,1,0,
        0,0,172,173,7,6,0,0,173,174,7,2,0,0,174,175,7,7,0,0,175,176,7,0,
        0,0,176,177,7,1,0,0,177,178,7,8,0,0,178,6,1,0,0,0,179,180,7,9,0,
        0,180,181,7,10,0,0,181,182,7,3,0,0,182,183,7,0,0,0,183,184,7,2,0,
        0,184,8,1,0,0,0,185,186,7,9,0,0,186,187,7,10,0,0,187,188,7,0,0,0,
        188,189,7,1,0,0,189,190,7,2,0,0,190,10,1,0,0,0,191,192,7,9,0,0,192,
        193,7,10,0,0,193,194,7,6,0,0,194,195,7,2,0,0,195,196,7,7,0,0,196,
        197,7,0,0,0,197,198,7,1,0,0,198,199,7,8,0,0,199,12,1,0,0,0,200,201,
        7,11,0,0,201,202,7,5,0,0,202,203,7,4,0,0,203,204,7,12,0,0,204,205,
        7,2,0,0,205,14,1,0,0,0,206,207,7,13,0,0,207,208,7,4,0,0,208,209,
        7,0,0,0,209,210,7,14,0,0,210,16,1,0,0,0,211,212,7,7,0,0,212,213,
        7,15,0,0,213,214,7,2,0,0,214,215,7,10,0,0,215,216,7,7,0,0,216,217,
        7,1,0,0,217,18,1,0,0,0,218,219,5,42,0,0,219,20,1,0,0,0,220,221,5,
        47,0,0,221,22,1,0,0,0,222,223,5,37,0,0,223,24,1,0,0,0,224,225,5,
        43,0,0,225,26,1,0,0,0,226,227,5,45,0,0,227,28,1,0,0,0,228,229,7,
        1,0,0,229,230,7,4,0,0,230,231,7,2,0,0,231,30,1,0,0,0,232,233,7,12,
        0,0,233,234,7,1,0,0,234,235,7,14,0,0,235,32,1,0,0,0,236,237,7,4,
        0,0,237,238,7,7,0,0,238,34,1,0,0,0,239,240,7,3,0,0,240,241,7,16,
        0,0,241,36,1,0,0,0,242,243,7,6,0,0,243,244,7,17,0,0,244,245,7,12,
        0,0,245,246,7,18,0,0,246,38,1,0,0,0,247,248,7,18,0,0,248,249,7,12,
        0,0,249,250,7,10,0,0,250,251,7,5,0,0,251,252,7,0,0,0,252,253,7,16,
        0,0,253,40,1,0,0,0,254,255,7,18,0,0,255,256,7,12,0,0,256,257,7,10,
        0,0,257,258,7,5,0,0,258,259,7,0,0,0,259,260,7,19,0,0,260,42,1,0,
        0,0,261,262,7,8,0,0,262,263,7,7,0,0,263,264,7,4,0,0,264,265,7,13,
        0,0,265,266,7,15,0,0,266,267,7,7,0,0,267,44,1,0,0,0,268,269,7,20,
        0,0,269,270,7,21,0,0,270,271,7,19,0,0,271,46,1,0,0,0,272,273,7,20,
        0,0,273,274,7,21,0,0,274,275,7,22,0,0,275,48,1,0,0,0,276,277,7,20,
        0,0,277,278,7,21,0,0,278,279,7,16,0,0,279,50,1,0,0,0,280,281,7,20,
        0,0,281,282,7,21,0,0,282,283,7,18,0,0,283,52,1,0,0,0,284,285,7,23,
        0,0,285,286,7,12,0,0,286,287,7,14,0,0,287,288,7,12,0,0,288,289,7,
        20,0,0,289,290,7,12,0,0,290,291,7,7,0,0,291,292,7,14,0,0,292,54,
        1,0,0,0,293,294,7,20,0,0,294,295,7,15,0,0,295,296,7,12,0,0,296,297,
        7,6,0,0,297,298,7,10,0,0,298,299,7,7,0,0,299,300,7,15,0,0,300,56,
        1,0,0,0,301,302,7,18,0,0,302,303,7,7,0,0,303,304,7,0,0,0,304,305,
        7,1,0,0,305,306,7,2,0,0,306,58,1,0,0,0,307,308,7,3,0,0,308,309,7,
        12,0,0,309,310,7,7,0,0,310,311,7,7,0,0,311,312,7,0,0,0,312,313,7,
        15,0,0,313,314,7,7,0,0,314,60,1,0,0,0,315,316,5,61,0,0,316,317,5,
        61,0,0,317,62,1,0,0,0,318,319,5,33,0,0,319,320,5,61,0,0,320,64,1,
        0,0,0,321,322,5,62,0,0,322,66,1,0,0,0,323,324,5,62,0,0,324,325,5,
        61,0,0,325,68,1,0,0,0,326,327,5,60,0,0,327,70,1,0,0,0,328,329,5,
        60,0,0,329,330,5,61,0,0,330,72,1,0,0,0,331,332,5,61,0,0,332,74,1,
        0,0,0,333,334,5,43,0,0,334,335,5,43,0,0,335,76,1,0,0,0,336,337,5,
        45,0,0,337,338,5,45,0,0,338,78,1,0,0,0,339,340,5,43,0,0,340,341,
        5,61,0,0,341,80,1,0,0,0,342,343,5,45,0,0,343,344,5,61,0,0,344,82,
        1,0,0,0,345,346,5,42,0,0,346,347,5,61,0,0,347,84,1,0,0,0,348,349,
        5,47,0,0,349,350,5,61,0,0,350,86,1,0,0,0,351,352,5,37,0,0,352,353,
        5,61,0,0,353,88,1,0,0,0,354,355,5,59,0,0,355,90,1,0,0,0,356,357,
        7,13,0,0,357,358,7,12,0,0,358,359,7,7,0,0,359,92,1,0,0,0,360,361,
        7,11,0,0,361,362,7,4,0,0,362,363,7,7,0,0,363,94,1,0,0,0,364,365,
        7,6,0,0,365,366,7,15,0,0,366,367,7,12,0,0,367,368,7,7,0,0,368,369,
        7,21,0,0,369,370,7,23,0,0,370,96,1,0,0,0,371,372,7,0,0,0,372,373,
        7,1,0,0,373,98,1,0,0,0,374,375,7,17,0,0,375,376,7,23,0,0,376,377,
        7,15,0,0,377,378,7,7,0,0,378,379,7,15,0,0,379,100,1,0,0,0,380,381,
        7,0,0,0,381,382,7,11,0,0,382,102,1,0,0,0,383,384,7,15,0,0,384,385,
        7,5,0,0,385,386,7,6,0,0,386,387,7,15,0,0,387,104,1,0,0,0,388,389,
        7,17,0,0,389,390,7,23,0,0,390,391,7,0,0,0,391,392,7,5,0,0,392,393,
        7,15,0,0,393,106,1,0,0,0,394,395,7,14,0,0,395,396,7,4,0,0,396,108,
        1,0,0,0,397,398,5,123,0,0,398,110,1,0,0,0,399,400,5,125,0,0,400,
        112,1,0,0,0,401,402,5,40,0,0,402,114,1,0,0,0,403,404,5,41,0,0,404,
        116,1,0,0,0,405,406,5,91,0,0,406,118,1,0,0,0,407,408,5,93,0,0,408,
        120,1,0,0,0,409,410,5,46,0,0,410,122,1,0,0,0,411,412,5,34,0,0,412,
        124,1,0,0,0,413,414,5,44,0,0,414,126,1,0,0,0,415,416,5,47,0,0,416,
        417,5,42,0,0,417,421,1,0,0,0,418,420,9,0,0,0,419,418,1,0,0,0,420,
        423,1,0,0,0,421,422,1,0,0,0,421,419,1,0,0,0,422,424,1,0,0,0,423,
        421,1,0,0,0,424,425,5,42,0,0,425,436,5,47,0,0,426,427,5,47,0,0,427,
        428,5,47,0,0,428,432,1,0,0,0,429,431,8,24,0,0,430,429,1,0,0,0,431,
        434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,436,1,0,0,0,434,
        432,1,0,0,0,435,415,1,0,0,0,435,426,1,0,0,0,436,128,1,0,0,0,437,
        438,7,2,0,0,438,439,7,7,0,0,439,440,7,10,0,0,440,441,7,15,0,0,441,
        130,1,0,0,0,442,443,7,11,0,0,443,444,7,12,0,0,444,445,7,5,0,0,445,
        446,7,6,0,0,446,447,7,15,0,0,447,132,1,0,0,0,448,449,7,25,0,0,449,
        134,1,0,0,0,450,451,7,26,0,0,451,136,1,0,0,0,452,453,5,124,0,0,453,
        454,5,48,0,0,454,465,5,62,0,0,455,456,5,124,0,0,456,457,5,49,0,0,
        457,465,5,62,0,0,458,459,5,124,0,0,459,460,5,43,0,0,460,465,5,62,
        0,0,461,462,5,124,0,0,462,463,5,45,0,0,463,465,5,62,0,0,464,452,
        1,0,0,0,464,455,1,0,0,0,464,458,1,0,0,0,464,461,1,0,0,0,465,138,
        1,0,0,0,466,470,3,129,64,0,467,470,3,131,65,0,468,470,2,48,49,0,
        469,466,1,0,0,0,469,467,1,0,0,0,469,468,1,0,0,0,470,140,1,0,0,0,
        471,473,3,135,67,0,472,471,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,
        0,474,476,3,133,66,0,475,474,1,0,0,0,476,477,1,0,0,0,477,475,1,0,
        0,0,477,478,1,0,0,0,478,142,1,0,0,0,479,481,3,135,67,0,480,479,1,
        0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,484,3,133,66,0,483,482,
        1,0,0,0,484,485,1,0,0,0,485,483,1,0,0,0,485,486,1,0,0,0,486,487,
        1,0,0,0,487,491,5,46,0,0,488,490,3,133,66,0,489,488,1,0,0,0,490,
        493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,504,1,0,0,0,493,
        491,1,0,0,0,494,496,3,135,67,0,495,494,1,0,0,0,495,496,1,0,0,0,496,
        497,1,0,0,0,497,499,5,46,0,0,498,500,3,133,66,0,499,498,1,0,0,0,
        500,501,1,0,0,0,501,499,1,0,0,0,501,502,1,0,0,0,502,504,1,0,0,0,
        503,480,1,0,0,0,503,495,1,0,0,0,504,144,1,0,0,0,505,506,5,48,0,0,
        506,509,7,22,0,0,507,510,7,27,0,0,508,510,3,133,66,0,509,507,1,0,
        0,0,509,508,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,1,0,
        0,0,512,146,1,0,0,0,513,514,5,48,0,0,514,516,7,3,0,0,515,517,7,28,
        0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,516,1,0,0,0,518,519,1,0,
        0,0,519,148,1,0,0,0,520,523,3,117,58,0,521,524,3,139,69,0,522,524,
        2,48,49,0,523,521,1,0,0,0,523,522,1,0,0,0,524,536,1,0,0,0,525,529,
        3,125,62,0,526,528,5,32,0,0,527,526,1,0,0,0,528,531,1,0,0,0,529,
        527,1,0,0,0,529,530,1,0,0,0,530,534,1,0,0,0,531,529,1,0,0,0,532,
        535,3,139,69,0,533,535,2,48,49,0,534,532,1,0,0,0,534,533,1,0,0,0,
        535,537,1,0,0,0,536,525,1,0,0,0,536,537,1,0,0,0,537,538,1,0,0,0,
        538,539,3,119,59,0,539,540,7,9,0,0,540,556,1,0,0,0,541,542,3,143,
        71,0,542,543,3,125,62,0,543,544,3,143,71,0,544,545,7,9,0,0,545,556,
        1,0,0,0,546,556,3,137,68,0,547,549,3,135,67,0,548,547,1,0,0,0,548,
        549,1,0,0,0,549,552,1,0,0,0,550,553,3,139,69,0,551,553,2,48,49,0,
        552,550,1,0,0,0,552,551,1,0,0,0,553,554,1,0,0,0,554,556,7,9,0,0,
        555,520,1,0,0,0,555,541,1,0,0,0,555,546,1,0,0,0,555,548,1,0,0,0,
        556,150,1,0,0,0,557,606,3,149,74,0,558,559,3,117,58,0,559,571,3,
        149,74,0,560,564,3,125,62,0,561,563,5,32,0,0,562,561,1,0,0,0,563,
        566,1,0,0,0,564,562,1,0,0,0,564,565,1,0,0,0,565,567,1,0,0,0,566,
        564,1,0,0,0,567,568,3,149,74,0,568,570,1,0,0,0,569,560,1,0,0,0,570,
        573,1,0,0,0,571,569,1,0,0,0,571,572,1,0,0,0,572,574,1,0,0,0,573,
        571,1,0,0,0,574,575,3,119,59,0,575,606,1,0,0,0,576,577,3,117,58,
        0,577,589,3,141,70,0,578,582,3,125,62,0,579,581,5,32,0,0,580,579,
        1,0,0,0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,
        1,0,0,0,584,582,1,0,0,0,585,586,3,141,70,0,586,588,1,0,0,0,587,578,
        1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,0,0,590,592,
        1,0,0,0,591,589,1,0,0,0,592,593,3,119,59,0,593,594,7,9,0,0,594,606,
        1,0,0,0,595,597,3,135,67,0,596,595,1,0,0,0,596,597,1,0,0,0,597,599,
        1,0,0,0,598,600,3,133,66,0,599,598,1,0,0,0,600,601,1,0,0,0,601,599,
        1,0,0,0,601,602,1,0,0,0,602,603,1,0,0,0,603,604,7,9,0,0,604,606,
        1,0,0,0,605,557,1,0,0,0,605,558,1,0,0,0,605,576,1,0,0,0,605,596,
        1,0,0,0,606,152,1,0,0,0,607,608,3,157,78,0,608,609,7,9,0,0,609,154,
        1,0,0,0,610,614,7,29,0,0,611,613,7,30,0,0,612,611,1,0,0,0,613,616,
        1,0,0,0,614,612,1,0,0,0,614,615,1,0,0,0,615,156,1,0,0,0,616,614,
        1,0,0,0,617,625,5,34,0,0,618,619,5,92,0,0,619,624,9,0,0,0,620,621,
        5,34,0,0,621,624,5,34,0,0,622,624,8,31,0,0,623,618,1,0,0,0,623,620,
        1,0,0,0,623,622,1,0,0,0,624,627,1,0,0,0,625,623,1,0,0,0,625,626,
        1,0,0,0,626,628,1,0,0,0,627,625,1,0,0,0,628,629,5,34,0,0,629,158,
        1,0,0,0,630,632,7,32,0,0,631,630,1,0,0,0,632,633,1,0,0,0,633,631,
        1,0,0,0,633,634,1,0,0,0,634,637,1,0,0,0,635,637,3,127,63,0,636,631,
        1,0,0,0,636,635,1,0,0,0,637,638,1,0,0,0,638,639,6,79,0,0,639,160,
        1,0,0,0,640,642,5,13,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,
        1,0,0,0,643,644,5,10,0,0,644,162,1,0,0,0,37,0,421,432,435,464,469,
        472,477,480,485,491,495,501,503,509,511,518,523,529,534,536,548,
        552,555,564,571,582,589,596,601,605,614,623,625,633,636,641,1,6,
        0,0
    ]

class qutes_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_TYPE = 1
    BOOL_TYPE = 2
    STRING_TYPE = 3
    QUBIT_TYPE = 4
    QUINT_TYPE = 5
    QUSTRING_TYPE = 6
    FLOAT_TYPE = 7
    VOID_TYPE = 8
    RETURN = 9
    MULTIPLY = 10
    DIVIDE = 11
    MODULE = 12
    ADD = 13
    SUB = 14
    NOT = 15
    AND = 16
    OR = 17
    BY = 18
    SWAP = 19
    PAULIY = 20
    PAULIZ = 21
    GROVER = 22
    MCZ = 23
    MCX = 24
    MCY = 25
    MCP = 26
    HADAMARD = 27
    MEASURE = 28
    PRINT = 29
    BARRIER = 30
    EQUAL = 31
    NOT_EQUAL = 32
    GREATER = 33
    GREATEREQUAL = 34
    LOWER = 35
    LOWEREQUAL = 36
    ASSIGN = 37
    AUTO_INCREMENT = 38
    AUTO_DECREMENT = 39
    AUTO_SUM = 40
    AUTO_SUB = 41
    AUTO_MULTIPLY = 42
    AUTO_DIVIDE = 43
    AUTO_MODULE = 44
    END_OF_STATEMENT = 45
    VAR_STATEMENT = 46
    FOR_STATEMENT = 47
    SEARCH_STATEMENT = 48
    IN_STATEMENT = 49
    WHERE_STATEMENT = 50
    IF_STATEMENT = 51
    ELSE_STATEMENT = 52
    WHILE_STATEMENT = 53
    DO_STATEMENT = 54
    CURLY_PARENTHESIS_OPEN = 55
    CURLY_PARENTHESIS_CLOSE = 56
    ROUND_PARENTHESIS_OPEN = 57
    ROUND_PARENTHESIS_CLOSE = 58
    SQUARE_PARENTHESIS_OPEN = 59
    SQUARE_PARENTHESIS_CLOSE = 60
    DOT = 61
    STRING_ENCLOSURE = 62
    COMMA = 63
    BOOL_LITERAL = 64
    INT_LITERAL = 65
    FLOAT_LITERAL = 66
    HEX_LITERAL = 67
    BIN_LITERAL = 68
    QUBIT_LITERAL = 69
    QUINT_LITERAL = 70
    QUSTRING_LITERAL = 71
    SYMBOL_LITERAL = 72
    STRING_LITERAL = 73
    WS = 74
    NEWLINE = 75

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'bool'", "'string'", "'qubit'", "'quint'", "'qustring'", 
            "'float'", "'void'", "'return'", "'*'", "'/'", "'%'", "'+'", 
            "'-'", "'not'", "'and'", "'or'", "'by'", "'swap'", "'pauliy'", 
            "'pauliz'", "'grover'", "'mcz'", "'mcx'", "'mcy'", "'mcp'", 
            "'hadamard'", "'measure'", "'print'", "'barrier'", "'=='", "'!='", 
            "'>'", "'>='", "'<'", "'<='", "'='", "'++'", "'--'", "'+='", 
            "'-='", "'*='", "'/='", "'%='", "';'", "'var'", "'for'", "'search'", 
            "'in'", "'where'", "'if'", "'else'", "'while'", "'do'", "'{'", 
            "'}'", "'('", "')'", "'['", "']'", "'.'", "'\"'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", "QUINT_TYPE", 
            "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", "RETURN", "MULTIPLY", 
            "DIVIDE", "MODULE", "ADD", "SUB", "NOT", "AND", "OR", "BY", 
            "SWAP", "PAULIY", "PAULIZ", "GROVER", "MCZ", "MCX", "MCY", "MCP", 
            "HADAMARD", "MEASURE", "PRINT", "BARRIER", "EQUAL", "NOT_EQUAL", 
            "GREATER", "GREATEREQUAL", "LOWER", "LOWEREQUAL", "ASSIGN", 
            "AUTO_INCREMENT", "AUTO_DECREMENT", "AUTO_SUM", "AUTO_SUB", 
            "AUTO_MULTIPLY", "AUTO_DIVIDE", "AUTO_MODULE", "END_OF_STATEMENT", 
            "VAR_STATEMENT", "FOR_STATEMENT", "SEARCH_STATEMENT", "IN_STATEMENT", 
            "WHERE_STATEMENT", "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", 
            "DO_STATEMENT", "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", 
            "ROUND_PARENTHESIS_OPEN", "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
            "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", "COMMA", 
            "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", "HEX_LITERAL", 
            "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", "QUSTRING_LITERAL", 
            "SYMBOL_LITERAL", "STRING_LITERAL", "WS", "NEWLINE" ]

    ruleNames = [ "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", 
                  "QUINT_TYPE", "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", 
                  "RETURN", "MULTIPLY", "DIVIDE", "MODULE", "ADD", "SUB", 
                  "NOT", "AND", "OR", "BY", "SWAP", "PAULIY", "PAULIZ", 
                  "GROVER", "MCZ", "MCX", "MCY", "MCP", "HADAMARD", "MEASURE", 
                  "PRINT", "BARRIER", "EQUAL", "NOT_EQUAL", "GREATER", "GREATEREQUAL", 
                  "LOWER", "LOWEREQUAL", "ASSIGN", "AUTO_INCREMENT", "AUTO_DECREMENT", 
                  "AUTO_SUM", "AUTO_SUB", "AUTO_MULTIPLY", "AUTO_DIVIDE", 
                  "AUTO_MODULE", "END_OF_STATEMENT", "VAR_STATEMENT", "FOR_STATEMENT", 
                  "SEARCH_STATEMENT", "IN_STATEMENT", "WHERE_STATEMENT", 
                  "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
                  "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
                  "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
                  "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", 
                  "COMMA", "COMMENT", "TRUE", "FALSE", "DIGIT", "MATH_SIGN", 
                  "QUBIT_STANDARD", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", 
                  "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
                  "WS", "NEWLINE" ]

    grammarFileName = "qutes_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


