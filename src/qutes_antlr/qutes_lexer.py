# Generated from /workspaces/qutes_lang/specification/grammar/qutes_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,57,547,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,
        3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
        1,20,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,31,
        1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,34,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
        1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,
        1,45,1,45,5,45,327,8,45,10,45,12,45,330,9,45,1,45,1,45,1,45,1,45,
        1,45,1,45,5,45,338,8,45,10,45,12,45,341,9,45,3,45,343,8,45,1,46,
        1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,49,
        1,49,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        3,50,372,8,50,1,51,1,51,1,51,3,51,377,8,51,1,52,4,52,380,8,52,11,
        52,12,52,381,1,53,3,53,385,8,53,1,53,4,53,388,8,53,11,53,12,53,389,
        1,53,1,53,5,53,394,8,53,10,53,12,53,397,9,53,1,53,3,53,400,8,53,
        1,53,1,53,4,53,404,8,53,11,53,12,53,405,3,53,408,8,53,1,54,1,54,
        1,54,1,54,4,54,414,8,54,11,54,12,54,415,1,55,1,55,1,55,4,55,421,
        8,55,11,55,12,55,422,1,56,1,56,1,56,3,56,428,8,56,1,56,1,56,5,56,
        432,8,56,10,56,12,56,435,9,56,1,56,1,56,3,56,439,8,56,3,56,441,8,
        56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,453,8,
        56,1,56,1,56,3,56,457,8,56,1,56,3,56,460,8,56,1,57,1,57,1,57,1,57,
        1,57,5,57,467,8,57,10,57,12,57,470,9,57,1,57,1,57,5,57,474,8,57,
        10,57,12,57,477,9,57,1,57,1,57,1,57,1,57,1,57,1,57,5,57,485,8,57,
        10,57,12,57,488,9,57,1,57,1,57,5,57,492,8,57,10,57,12,57,495,9,57,
        1,57,1,57,1,57,1,57,3,57,501,8,57,1,57,4,57,504,8,57,11,57,12,57,
        505,1,57,1,57,3,57,510,8,57,1,58,1,58,1,58,1,59,4,59,516,8,59,11,
        59,12,59,517,1,60,1,60,1,60,1,60,1,60,1,60,5,60,526,8,60,10,60,12,
        60,529,9,60,1,60,1,60,1,61,4,61,534,8,61,11,61,12,61,535,1,61,3,
        61,539,8,61,1,61,1,61,1,62,3,62,544,8,62,1,62,1,62,1,328,0,63,1,
        1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
        14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
        25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
        36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,0,93,
        0,95,0,97,0,99,0,101,0,103,46,105,47,107,48,109,49,111,50,113,51,
        115,52,117,53,119,54,121,55,123,56,125,57,1,0,32,2,0,73,73,105,105,
        2,0,78,78,110,110,2,0,84,84,116,116,2,0,66,66,98,98,2,0,79,79,111,
        111,2,0,76,76,108,108,2,0,83,83,115,115,2,0,82,82,114,114,2,0,71,
        71,103,103,2,0,81,81,113,113,2,0,85,85,117,117,2,0,70,70,102,102,
        2,0,65,65,97,97,2,0,86,86,118,118,2,0,68,68,100,100,2,0,69,69,101,
        101,2,0,80,80,112,112,2,0,89,89,121,121,2,0,90,90,122,122,2,0,77,
        77,109,109,2,0,67,67,99,99,2,0,72,72,104,104,2,0,87,87,119,119,2,
        0,10,10,13,13,1,0,48,57,2,0,43,43,45,45,2,0,88,88,120,120,2,0,65,
        70,97,102,1,0,48,49,3,0,48,57,65,90,97,122,2,0,34,34,92,92,3,0,9,
        10,13,13,32,32,583,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
        0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,
        0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,
        0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,
        0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
        0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
        0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,
        0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,
        0,0,89,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,
        0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,
        119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,1,127,1,0,
        0,0,3,131,1,0,0,0,5,136,1,0,0,0,7,143,1,0,0,0,9,149,1,0,0,0,11,155,
        1,0,0,0,13,164,1,0,0,0,15,170,1,0,0,0,17,175,1,0,0,0,19,182,1,0,
        0,0,21,184,1,0,0,0,23,186,1,0,0,0,25,190,1,0,0,0,27,197,1,0,0,0,
        29,204,1,0,0,0,31,211,1,0,0,0,33,215,1,0,0,0,35,224,1,0,0,0,37,232,
        1,0,0,0,39,238,1,0,0,0,41,246,1,0,0,0,43,249,1,0,0,0,45,251,1,0,
        0,0,47,254,1,0,0,0,49,256,1,0,0,0,51,259,1,0,0,0,53,261,1,0,0,0,
        55,263,1,0,0,0,57,267,1,0,0,0,59,271,1,0,0,0,61,278,1,0,0,0,63,281,
        1,0,0,0,65,287,1,0,0,0,67,290,1,0,0,0,69,295,1,0,0,0,71,301,1,0,
        0,0,73,304,1,0,0,0,75,306,1,0,0,0,77,308,1,0,0,0,79,310,1,0,0,0,
        81,312,1,0,0,0,83,314,1,0,0,0,85,316,1,0,0,0,87,318,1,0,0,0,89,320,
        1,0,0,0,91,342,1,0,0,0,93,344,1,0,0,0,95,349,1,0,0,0,97,355,1,0,
        0,0,99,357,1,0,0,0,101,371,1,0,0,0,103,376,1,0,0,0,105,379,1,0,0,
        0,107,407,1,0,0,0,109,409,1,0,0,0,111,417,1,0,0,0,113,459,1,0,0,
        0,115,509,1,0,0,0,117,511,1,0,0,0,119,515,1,0,0,0,121,519,1,0,0,
        0,123,538,1,0,0,0,125,543,1,0,0,0,127,128,7,0,0,0,128,129,7,1,0,
        0,129,130,7,2,0,0,130,2,1,0,0,0,131,132,7,3,0,0,132,133,7,4,0,0,
        133,134,7,4,0,0,134,135,7,5,0,0,135,4,1,0,0,0,136,137,7,6,0,0,137,
        138,7,2,0,0,138,139,7,7,0,0,139,140,7,0,0,0,140,141,7,1,0,0,141,
        142,7,8,0,0,142,6,1,0,0,0,143,144,7,9,0,0,144,145,7,10,0,0,145,146,
        7,3,0,0,146,147,7,0,0,0,147,148,7,2,0,0,148,8,1,0,0,0,149,150,7,
        9,0,0,150,151,7,10,0,0,151,152,7,0,0,0,152,153,7,1,0,0,153,154,7,
        2,0,0,154,10,1,0,0,0,155,156,7,9,0,0,156,157,7,10,0,0,157,158,7,
        6,0,0,158,159,7,2,0,0,159,160,7,7,0,0,160,161,7,0,0,0,161,162,7,
        1,0,0,162,163,7,8,0,0,163,12,1,0,0,0,164,165,7,11,0,0,165,166,7,
        5,0,0,166,167,7,4,0,0,167,168,7,12,0,0,168,169,7,2,0,0,169,14,1,
        0,0,0,170,171,7,13,0,0,171,172,7,4,0,0,172,173,7,0,0,0,173,174,7,
        14,0,0,174,16,1,0,0,0,175,176,7,7,0,0,176,177,7,15,0,0,177,178,7,
        2,0,0,178,179,7,10,0,0,179,180,7,7,0,0,180,181,7,1,0,0,181,18,1,
        0,0,0,182,183,5,43,0,0,183,20,1,0,0,0,184,185,5,45,0,0,185,22,1,
        0,0,0,186,187,7,1,0,0,187,188,7,4,0,0,188,189,7,2,0,0,189,24,1,0,
        0,0,190,191,7,16,0,0,191,192,7,12,0,0,192,193,7,10,0,0,193,194,7,
        5,0,0,194,195,7,0,0,0,195,196,7,17,0,0,196,26,1,0,0,0,197,198,7,
        16,0,0,198,199,7,12,0,0,199,200,7,10,0,0,200,201,7,5,0,0,201,202,
        7,0,0,0,202,203,7,18,0,0,203,28,1,0,0,0,204,205,7,8,0,0,205,206,
        7,7,0,0,206,207,7,4,0,0,207,208,7,13,0,0,208,209,7,15,0,0,209,210,
        7,7,0,0,210,30,1,0,0,0,211,212,7,19,0,0,212,213,7,20,0,0,213,214,
        7,18,0,0,214,32,1,0,0,0,215,216,7,21,0,0,216,217,7,12,0,0,217,218,
        7,14,0,0,218,219,7,12,0,0,219,220,7,19,0,0,220,221,7,12,0,0,221,
        222,7,7,0,0,222,223,7,14,0,0,223,34,1,0,0,0,224,225,7,19,0,0,225,
        226,7,15,0,0,226,227,7,12,0,0,227,228,7,6,0,0,228,229,7,10,0,0,229,
        230,7,7,0,0,230,231,7,15,0,0,231,36,1,0,0,0,232,233,7,16,0,0,233,
        234,7,7,0,0,234,235,7,0,0,0,235,236,7,1,0,0,236,237,7,2,0,0,237,
        38,1,0,0,0,238,239,7,3,0,0,239,240,7,12,0,0,240,241,7,7,0,0,241,
        242,7,7,0,0,242,243,7,0,0,0,243,244,7,15,0,0,244,245,7,7,0,0,245,
        40,1,0,0,0,246,247,5,61,0,0,247,248,5,61,0,0,248,42,1,0,0,0,249,
        250,5,62,0,0,250,44,1,0,0,0,251,252,5,62,0,0,252,253,5,61,0,0,253,
        46,1,0,0,0,254,255,5,60,0,0,255,48,1,0,0,0,256,257,5,60,0,0,257,
        258,5,61,0,0,258,50,1,0,0,0,259,260,5,61,0,0,260,52,1,0,0,0,261,
        262,5,59,0,0,262,54,1,0,0,0,263,264,7,13,0,0,264,265,7,12,0,0,265,
        266,7,7,0,0,266,56,1,0,0,0,267,268,7,11,0,0,268,269,7,4,0,0,269,
        270,7,7,0,0,270,58,1,0,0,0,271,272,7,6,0,0,272,273,7,15,0,0,273,
        274,7,12,0,0,274,275,7,7,0,0,275,276,7,20,0,0,276,277,7,21,0,0,277,
        60,1,0,0,0,278,279,7,0,0,0,279,280,7,1,0,0,280,62,1,0,0,0,281,282,
        7,22,0,0,282,283,7,21,0,0,283,284,7,15,0,0,284,285,7,7,0,0,285,286,
        7,15,0,0,286,64,1,0,0,0,287,288,7,0,0,0,288,289,7,11,0,0,289,66,
        1,0,0,0,290,291,7,15,0,0,291,292,7,5,0,0,292,293,7,6,0,0,293,294,
        7,15,0,0,294,68,1,0,0,0,295,296,7,22,0,0,296,297,7,21,0,0,297,298,
        7,0,0,0,298,299,7,5,0,0,299,300,7,15,0,0,300,70,1,0,0,0,301,302,
        7,14,0,0,302,303,7,4,0,0,303,72,1,0,0,0,304,305,5,123,0,0,305,74,
        1,0,0,0,306,307,5,125,0,0,307,76,1,0,0,0,308,309,5,40,0,0,309,78,
        1,0,0,0,310,311,5,41,0,0,311,80,1,0,0,0,312,313,5,91,0,0,313,82,
        1,0,0,0,314,315,5,93,0,0,315,84,1,0,0,0,316,317,5,46,0,0,317,86,
        1,0,0,0,318,319,5,34,0,0,319,88,1,0,0,0,320,321,5,44,0,0,321,90,
        1,0,0,0,322,323,5,47,0,0,323,324,5,42,0,0,324,328,1,0,0,0,325,327,
        9,0,0,0,326,325,1,0,0,0,327,330,1,0,0,0,328,329,1,0,0,0,328,326,
        1,0,0,0,329,331,1,0,0,0,330,328,1,0,0,0,331,332,5,42,0,0,332,343,
        5,47,0,0,333,334,5,47,0,0,334,335,5,47,0,0,335,339,1,0,0,0,336,338,
        8,23,0,0,337,336,1,0,0,0,338,341,1,0,0,0,339,337,1,0,0,0,339,340,
        1,0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,342,322,1,0,0,0,342,333,
        1,0,0,0,343,92,1,0,0,0,344,345,7,2,0,0,345,346,7,7,0,0,346,347,7,
        10,0,0,347,348,7,15,0,0,348,94,1,0,0,0,349,350,7,11,0,0,350,351,
        7,12,0,0,351,352,7,5,0,0,352,353,7,6,0,0,353,354,7,15,0,0,354,96,
        1,0,0,0,355,356,7,24,0,0,356,98,1,0,0,0,357,358,7,25,0,0,358,100,
        1,0,0,0,359,360,5,124,0,0,360,361,5,48,0,0,361,372,5,62,0,0,362,
        363,5,124,0,0,363,364,5,49,0,0,364,372,5,62,0,0,365,366,5,124,0,
        0,366,367,5,43,0,0,367,372,5,62,0,0,368,369,5,124,0,0,369,370,5,
        45,0,0,370,372,5,62,0,0,371,359,1,0,0,0,371,362,1,0,0,0,371,365,
        1,0,0,0,371,368,1,0,0,0,372,102,1,0,0,0,373,377,3,93,46,0,374,377,
        3,95,47,0,375,377,2,48,49,0,376,373,1,0,0,0,376,374,1,0,0,0,376,
        375,1,0,0,0,377,104,1,0,0,0,378,380,3,97,48,0,379,378,1,0,0,0,380,
        381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,106,1,0,0,0,383,
        385,3,99,49,0,384,383,1,0,0,0,384,385,1,0,0,0,385,387,1,0,0,0,386,
        388,3,97,48,0,387,386,1,0,0,0,388,389,1,0,0,0,389,387,1,0,0,0,389,
        390,1,0,0,0,390,391,1,0,0,0,391,395,5,46,0,0,392,394,3,97,48,0,393,
        392,1,0,0,0,394,397,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,
        408,1,0,0,0,397,395,1,0,0,0,398,400,3,99,49,0,399,398,1,0,0,0,399,
        400,1,0,0,0,400,401,1,0,0,0,401,403,5,46,0,0,402,404,3,97,48,0,403,
        402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,
        408,1,0,0,0,407,384,1,0,0,0,407,399,1,0,0,0,408,108,1,0,0,0,409,
        410,5,48,0,0,410,413,7,26,0,0,411,414,7,27,0,0,412,414,3,97,48,0,
        413,411,1,0,0,0,413,412,1,0,0,0,414,415,1,0,0,0,415,413,1,0,0,0,
        415,416,1,0,0,0,416,110,1,0,0,0,417,418,5,48,0,0,418,420,7,3,0,0,
        419,421,7,28,0,0,420,419,1,0,0,0,421,422,1,0,0,0,422,420,1,0,0,0,
        422,423,1,0,0,0,423,112,1,0,0,0,424,427,3,81,40,0,425,428,3,103,
        51,0,426,428,2,48,49,0,427,425,1,0,0,0,427,426,1,0,0,0,428,440,1,
        0,0,0,429,433,3,89,44,0,430,432,5,32,0,0,431,430,1,0,0,0,432,435,
        1,0,0,0,433,431,1,0,0,0,433,434,1,0,0,0,434,438,1,0,0,0,435,433,
        1,0,0,0,436,439,3,103,51,0,437,439,2,48,49,0,438,436,1,0,0,0,438,
        437,1,0,0,0,439,441,1,0,0,0,440,429,1,0,0,0,440,441,1,0,0,0,441,
        442,1,0,0,0,442,443,3,83,41,0,443,444,7,9,0,0,444,460,1,0,0,0,445,
        446,3,107,53,0,446,447,3,89,44,0,447,448,3,107,53,0,448,449,7,9,
        0,0,449,460,1,0,0,0,450,460,3,101,50,0,451,453,3,99,49,0,452,451,
        1,0,0,0,452,453,1,0,0,0,453,456,1,0,0,0,454,457,3,103,51,0,455,457,
        2,48,49,0,456,454,1,0,0,0,456,455,1,0,0,0,457,458,1,0,0,0,458,460,
        7,9,0,0,459,424,1,0,0,0,459,445,1,0,0,0,459,450,1,0,0,0,459,452,
        1,0,0,0,460,114,1,0,0,0,461,510,3,113,56,0,462,463,3,81,40,0,463,
        475,3,113,56,0,464,468,3,89,44,0,465,467,5,32,0,0,466,465,1,0,0,
        0,467,470,1,0,0,0,468,466,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,
        0,470,468,1,0,0,0,471,472,3,113,56,0,472,474,1,0,0,0,473,464,1,0,
        0,0,474,477,1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,
        0,0,477,475,1,0,0,0,478,479,3,83,41,0,479,510,1,0,0,0,480,481,3,
        81,40,0,481,493,3,105,52,0,482,486,3,89,44,0,483,485,5,32,0,0,484,
        483,1,0,0,0,485,488,1,0,0,0,486,484,1,0,0,0,486,487,1,0,0,0,487,
        489,1,0,0,0,488,486,1,0,0,0,489,490,3,105,52,0,490,492,1,0,0,0,491,
        482,1,0,0,0,492,495,1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,
        496,1,0,0,0,495,493,1,0,0,0,496,497,3,83,41,0,497,498,7,9,0,0,498,
        510,1,0,0,0,499,501,3,99,49,0,500,499,1,0,0,0,500,501,1,0,0,0,501,
        503,1,0,0,0,502,504,3,97,48,0,503,502,1,0,0,0,504,505,1,0,0,0,505,
        503,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,0,507,508,7,9,0,0,508,
        510,1,0,0,0,509,461,1,0,0,0,509,462,1,0,0,0,509,480,1,0,0,0,509,
        500,1,0,0,0,510,116,1,0,0,0,511,512,3,121,60,0,512,513,7,9,0,0,513,
        118,1,0,0,0,514,516,7,29,0,0,515,514,1,0,0,0,516,517,1,0,0,0,517,
        515,1,0,0,0,517,518,1,0,0,0,518,120,1,0,0,0,519,527,5,34,0,0,520,
        521,5,92,0,0,521,526,9,0,0,0,522,523,5,34,0,0,523,526,5,34,0,0,524,
        526,8,30,0,0,525,520,1,0,0,0,525,522,1,0,0,0,525,524,1,0,0,0,526,
        529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,530,1,0,0,0,529,
        527,1,0,0,0,530,531,5,34,0,0,531,122,1,0,0,0,532,534,7,31,0,0,533,
        532,1,0,0,0,534,535,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,
        539,1,0,0,0,537,539,3,91,45,0,538,533,1,0,0,0,538,537,1,0,0,0,539,
        540,1,0,0,0,540,541,6,61,0,0,541,124,1,0,0,0,542,544,5,13,0,0,543,
        542,1,0,0,0,543,544,1,0,0,0,544,545,1,0,0,0,545,546,5,10,0,0,546,
        126,1,0,0,0,36,0,328,339,342,371,376,381,384,389,395,399,405,407,
        413,415,422,427,433,438,440,452,456,459,468,475,486,493,500,505,
        509,517,525,527,535,538,543,1,6,0,0
    ]

class qutes_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_TYPE = 1
    BOOL_TYPE = 2
    STRING_TYPE = 3
    QUBIT_TYPE = 4
    QUINT_TYPE = 5
    QUSTRING_TYPE = 6
    FLOAT_TYPE = 7
    VOID_TYPE = 8
    RETURN = 9
    ADD = 10
    SUB = 11
    NOT = 12
    PAULIY = 13
    PAULIZ = 14
    GROVER = 15
    MCZ = 16
    HADAMARD = 17
    MEASURE = 18
    PRINT = 19
    BARRIER = 20
    EQUAL = 21
    GREATER = 22
    GREATEREQUAL = 23
    LOWER = 24
    LOWEREQUAL = 25
    ASSIGN = 26
    END_OF_STATEMENT = 27
    VAR_STATEMENT = 28
    FOR_STATEMENT = 29
    SEARCH_STATEMENT = 30
    IN_STATEMENT = 31
    WHERE_STATEMENT = 32
    IF_STATEMENT = 33
    ELSE_STATEMENT = 34
    WHILE_STATEMENT = 35
    DO_STATEMENT = 36
    CURLY_PARENTHESIS_OPEN = 37
    CURLY_PARENTHESIS_CLOSE = 38
    ROUND_PARENTHESIS_OPEN = 39
    ROUND_PARENTHESIS_CLOSE = 40
    SQUARE_PARENTHESIS_OPEN = 41
    SQUARE_PARENTHESIS_CLOSE = 42
    DOT = 43
    STRING_ENCLOSURE = 44
    COMMA = 45
    BOOL_LITERAL = 46
    INT_LITERAL = 47
    FLOAT_LITERAL = 48
    HEX_LITERAL = 49
    BIN_LITERAL = 50
    QUBIT_LITERAL = 51
    QUINT_LITERAL = 52
    QUSTRING_LITERAL = 53
    SYMBOL_LITERAL = 54
    STRING_LITERAL = 55
    WS = 56
    NEWLINE = 57

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'bool'", "'string'", "'qubit'", "'quint'", "'qustring'", 
            "'float'", "'void'", "'return'", "'+'", "'-'", "'not'", "'pauliy'", 
            "'pauliz'", "'grover'", "'mcz'", "'hadamard'", "'measure'", 
            "'print'", "'barrier'", "'=='", "'>'", "'>='", "'<'", "'<='", 
            "'='", "';'", "'var'", "'for'", "'search'", "'in'", "'where'", 
            "'if'", "'else'", "'while'", "'do'", "'{'", "'}'", "'('", "')'", 
            "'['", "']'", "'.'", "'\"'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", "QUINT_TYPE", 
            "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", "RETURN", "ADD", 
            "SUB", "NOT", "PAULIY", "PAULIZ", "GROVER", "MCZ", "HADAMARD", 
            "MEASURE", "PRINT", "BARRIER", "EQUAL", "GREATER", "GREATEREQUAL", 
            "LOWER", "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", "VAR_STATEMENT", 
            "FOR_STATEMENT", "SEARCH_STATEMENT", "IN_STATEMENT", "WHERE_STATEMENT", 
            "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
            "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
            "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", "SQUARE_PARENTHESIS_CLOSE", 
            "DOT", "STRING_ENCLOSURE", "COMMA", "BOOL_LITERAL", "INT_LITERAL", 
            "FLOAT_LITERAL", "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", 
            "QUINT_LITERAL", "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
            "WS", "NEWLINE" ]

    ruleNames = [ "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", 
                  "QUINT_TYPE", "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", 
                  "RETURN", "ADD", "SUB", "NOT", "PAULIY", "PAULIZ", "GROVER", 
                  "MCZ", "HADAMARD", "MEASURE", "PRINT", "BARRIER", "EQUAL", 
                  "GREATER", "GREATEREQUAL", "LOWER", "LOWEREQUAL", "ASSIGN", 
                  "END_OF_STATEMENT", "VAR_STATEMENT", "FOR_STATEMENT", 
                  "SEARCH_STATEMENT", "IN_STATEMENT", "WHERE_STATEMENT", 
                  "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
                  "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
                  "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
                  "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", 
                  "COMMA", "COMMENT", "TRUE", "FALSE", "DIGIT", "MATH_SIGN", 
                  "QUBIT_STANDARD", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", 
                  "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
                  "WS", "NEWLINE" ]

    grammarFileName = "qutes_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


