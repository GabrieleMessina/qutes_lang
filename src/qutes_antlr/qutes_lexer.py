# Generated from /workspaces/qutes_lang/specification/grammar/qutes_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,490,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,0,1,1,1,1,1,
        1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,
        6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,
        1,19,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,
        1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,38,
        1,38,5,38,274,8,38,10,38,12,38,277,9,38,1,38,1,38,1,38,1,38,1,38,
        1,38,5,38,285,8,38,10,38,12,38,288,9,38,3,38,290,8,38,1,39,1,39,
        1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,42,1,42,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,
        319,8,43,1,44,1,44,3,44,323,8,44,1,45,4,45,326,8,45,11,45,12,45,
        327,1,46,3,46,331,8,46,1,46,4,46,334,8,46,11,46,12,46,335,1,46,1,
        46,5,46,340,8,46,10,46,12,46,343,9,46,1,46,3,46,346,8,46,1,46,1,
        46,4,46,350,8,46,11,46,12,46,351,3,46,354,8,46,1,47,1,47,1,47,1,
        47,4,47,360,8,47,11,47,12,47,361,1,48,1,48,1,48,4,48,367,8,48,11,
        48,12,48,368,1,49,1,49,1,49,3,49,374,8,49,1,49,1,49,5,49,378,8,49,
        10,49,12,49,381,9,49,1,49,1,49,3,49,385,8,49,3,49,387,8,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,399,8,49,1,49,
        1,49,3,49,403,8,49,1,49,3,49,406,8,49,1,50,1,50,1,50,1,50,1,50,5,
        50,413,8,50,10,50,12,50,416,9,50,1,50,1,50,5,50,420,8,50,10,50,12,
        50,423,9,50,1,50,1,50,1,50,1,50,1,50,1,50,5,50,431,8,50,10,50,12,
        50,434,9,50,1,50,1,50,3,50,438,8,50,1,50,1,50,1,50,1,50,3,50,444,
        8,50,1,50,4,50,447,8,50,11,50,12,50,448,1,50,1,50,3,50,453,8,50,
        1,51,1,51,1,51,1,52,4,52,459,8,52,11,52,12,52,460,1,53,1,53,1,53,
        1,53,1,53,1,53,5,53,469,8,53,10,53,12,53,472,9,53,1,53,1,53,1,54,
        4,54,477,8,54,11,54,12,54,478,1,54,3,54,482,8,54,1,54,1,54,1,55,
        3,55,487,8,55,1,55,1,55,1,275,0,56,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,0,79,0,
        81,0,83,0,85,0,87,0,89,39,91,40,93,41,95,42,97,43,99,44,101,45,103,
        46,105,47,107,48,109,49,111,50,1,0,31,2,0,73,73,105,105,2,0,78,78,
        110,110,2,0,84,84,116,116,2,0,66,66,98,98,2,0,79,79,111,111,2,0,
        76,76,108,108,2,0,83,83,115,115,2,0,82,82,114,114,2,0,71,71,103,
        103,2,0,81,81,113,113,2,0,85,85,117,117,2,0,70,70,102,102,2,0,65,
        65,97,97,2,0,86,86,118,118,2,0,68,68,100,100,2,0,69,69,101,101,2,
        0,80,80,112,112,2,0,89,89,121,121,2,0,90,90,122,122,2,0,72,72,104,
        104,2,0,77,77,109,109,2,0,87,87,119,119,2,0,10,10,13,13,1,0,48,57,
        2,0,43,43,45,45,2,0,88,88,120,120,2,0,65,70,97,102,1,0,48,49,3,0,
        48,57,65,90,97,122,2,0,34,34,92,92,3,0,9,10,13,13,32,32,525,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,
        0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,1,
        113,1,0,0,0,3,117,1,0,0,0,5,122,1,0,0,0,7,129,1,0,0,0,9,135,1,0,
        0,0,11,141,1,0,0,0,13,150,1,0,0,0,15,156,1,0,0,0,17,161,1,0,0,0,
        19,168,1,0,0,0,21,170,1,0,0,0,23,172,1,0,0,0,25,176,1,0,0,0,27,183,
        1,0,0,0,29,190,1,0,0,0,31,199,1,0,0,0,33,207,1,0,0,0,35,213,1,0,
        0,0,37,216,1,0,0,0,39,218,1,0,0,0,41,221,1,0,0,0,43,223,1,0,0,0,
        45,226,1,0,0,0,47,228,1,0,0,0,49,230,1,0,0,0,51,234,1,0,0,0,53,237,
        1,0,0,0,55,242,1,0,0,0,57,248,1,0,0,0,59,251,1,0,0,0,61,253,1,0,
        0,0,63,255,1,0,0,0,65,257,1,0,0,0,67,259,1,0,0,0,69,261,1,0,0,0,
        71,263,1,0,0,0,73,265,1,0,0,0,75,267,1,0,0,0,77,289,1,0,0,0,79,291,
        1,0,0,0,81,296,1,0,0,0,83,302,1,0,0,0,85,304,1,0,0,0,87,318,1,0,
        0,0,89,322,1,0,0,0,91,325,1,0,0,0,93,353,1,0,0,0,95,355,1,0,0,0,
        97,363,1,0,0,0,99,405,1,0,0,0,101,452,1,0,0,0,103,454,1,0,0,0,105,
        458,1,0,0,0,107,462,1,0,0,0,109,481,1,0,0,0,111,486,1,0,0,0,113,
        114,7,0,0,0,114,115,7,1,0,0,115,116,7,2,0,0,116,2,1,0,0,0,117,118,
        7,3,0,0,118,119,7,4,0,0,119,120,7,4,0,0,120,121,7,5,0,0,121,4,1,
        0,0,0,122,123,7,6,0,0,123,124,7,2,0,0,124,125,7,7,0,0,125,126,7,
        0,0,0,126,127,7,1,0,0,127,128,7,8,0,0,128,6,1,0,0,0,129,130,7,9,
        0,0,130,131,7,10,0,0,131,132,7,3,0,0,132,133,7,0,0,0,133,134,7,2,
        0,0,134,8,1,0,0,0,135,136,7,9,0,0,136,137,7,10,0,0,137,138,7,0,0,
        0,138,139,7,1,0,0,139,140,7,2,0,0,140,10,1,0,0,0,141,142,7,9,0,0,
        142,143,7,10,0,0,143,144,7,6,0,0,144,145,7,2,0,0,145,146,7,7,0,0,
        146,147,7,0,0,0,147,148,7,1,0,0,148,149,7,8,0,0,149,12,1,0,0,0,150,
        151,7,11,0,0,151,152,7,5,0,0,152,153,7,4,0,0,153,154,7,12,0,0,154,
        155,7,2,0,0,155,14,1,0,0,0,156,157,7,13,0,0,157,158,7,4,0,0,158,
        159,7,0,0,0,159,160,7,14,0,0,160,16,1,0,0,0,161,162,7,7,0,0,162,
        163,7,15,0,0,163,164,7,2,0,0,164,165,7,10,0,0,165,166,7,7,0,0,166,
        167,7,1,0,0,167,18,1,0,0,0,168,169,5,43,0,0,169,20,1,0,0,0,170,171,
        5,45,0,0,171,22,1,0,0,0,172,173,7,1,0,0,173,174,7,4,0,0,174,175,
        7,2,0,0,175,24,1,0,0,0,176,177,7,16,0,0,177,178,7,12,0,0,178,179,
        7,10,0,0,179,180,7,5,0,0,180,181,7,0,0,0,181,182,7,17,0,0,182,26,
        1,0,0,0,183,184,7,16,0,0,184,185,7,12,0,0,185,186,7,10,0,0,186,187,
        7,5,0,0,187,188,7,0,0,0,188,189,7,18,0,0,189,28,1,0,0,0,190,191,
        7,19,0,0,191,192,7,12,0,0,192,193,7,14,0,0,193,194,7,12,0,0,194,
        195,7,20,0,0,195,196,7,12,0,0,196,197,7,7,0,0,197,198,7,14,0,0,198,
        30,1,0,0,0,199,200,7,20,0,0,200,201,7,15,0,0,201,202,7,12,0,0,202,
        203,7,6,0,0,203,204,7,10,0,0,204,205,7,7,0,0,205,206,7,15,0,0,206,
        32,1,0,0,0,207,208,7,16,0,0,208,209,7,7,0,0,209,210,7,0,0,0,210,
        211,7,1,0,0,211,212,7,2,0,0,212,34,1,0,0,0,213,214,5,61,0,0,214,
        215,5,61,0,0,215,36,1,0,0,0,216,217,5,62,0,0,217,38,1,0,0,0,218,
        219,5,62,0,0,219,220,5,61,0,0,220,40,1,0,0,0,221,222,5,60,0,0,222,
        42,1,0,0,0,223,224,5,60,0,0,224,225,5,61,0,0,225,44,1,0,0,0,226,
        227,5,61,0,0,227,46,1,0,0,0,228,229,5,59,0,0,229,48,1,0,0,0,230,
        231,7,13,0,0,231,232,7,12,0,0,232,233,7,7,0,0,233,50,1,0,0,0,234,
        235,7,0,0,0,235,236,7,11,0,0,236,52,1,0,0,0,237,238,7,15,0,0,238,
        239,7,5,0,0,239,240,7,6,0,0,240,241,7,15,0,0,241,54,1,0,0,0,242,
        243,7,21,0,0,243,244,7,19,0,0,244,245,7,0,0,0,245,246,7,5,0,0,246,
        247,7,15,0,0,247,56,1,0,0,0,248,249,7,14,0,0,249,250,7,4,0,0,250,
        58,1,0,0,0,251,252,5,123,0,0,252,60,1,0,0,0,253,254,5,125,0,0,254,
        62,1,0,0,0,255,256,5,40,0,0,256,64,1,0,0,0,257,258,5,41,0,0,258,
        66,1,0,0,0,259,260,5,91,0,0,260,68,1,0,0,0,261,262,5,93,0,0,262,
        70,1,0,0,0,263,264,5,46,0,0,264,72,1,0,0,0,265,266,5,34,0,0,266,
        74,1,0,0,0,267,268,5,44,0,0,268,76,1,0,0,0,269,270,5,47,0,0,270,
        271,5,42,0,0,271,275,1,0,0,0,272,274,9,0,0,0,273,272,1,0,0,0,274,
        277,1,0,0,0,275,276,1,0,0,0,275,273,1,0,0,0,276,278,1,0,0,0,277,
        275,1,0,0,0,278,279,5,42,0,0,279,290,5,47,0,0,280,281,5,47,0,0,281,
        282,5,47,0,0,282,286,1,0,0,0,283,285,8,22,0,0,284,283,1,0,0,0,285,
        288,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,290,1,0,0,0,288,
        286,1,0,0,0,289,269,1,0,0,0,289,280,1,0,0,0,290,78,1,0,0,0,291,292,
        7,2,0,0,292,293,7,7,0,0,293,294,7,10,0,0,294,295,7,15,0,0,295,80,
        1,0,0,0,296,297,7,11,0,0,297,298,7,12,0,0,298,299,7,5,0,0,299,300,
        7,6,0,0,300,301,7,15,0,0,301,82,1,0,0,0,302,303,7,23,0,0,303,84,
        1,0,0,0,304,305,7,24,0,0,305,86,1,0,0,0,306,307,5,124,0,0,307,308,
        5,48,0,0,308,319,5,62,0,0,309,310,5,124,0,0,310,311,5,49,0,0,311,
        319,5,62,0,0,312,313,5,124,0,0,313,314,5,43,0,0,314,319,5,62,0,0,
        315,316,5,124,0,0,316,317,5,45,0,0,317,319,5,62,0,0,318,306,1,0,
        0,0,318,309,1,0,0,0,318,312,1,0,0,0,318,315,1,0,0,0,319,88,1,0,0,
        0,320,323,3,79,39,0,321,323,3,81,40,0,322,320,1,0,0,0,322,321,1,
        0,0,0,323,90,1,0,0,0,324,326,3,83,41,0,325,324,1,0,0,0,326,327,1,
        0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,92,1,0,0,0,329,331,3,85,
        42,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,334,3,83,
        41,0,333,332,1,0,0,0,334,335,1,0,0,0,335,333,1,0,0,0,335,336,1,0,
        0,0,336,337,1,0,0,0,337,341,5,46,0,0,338,340,3,83,41,0,339,338,1,
        0,0,0,340,343,1,0,0,0,341,339,1,0,0,0,341,342,1,0,0,0,342,354,1,
        0,0,0,343,341,1,0,0,0,344,346,3,85,42,0,345,344,1,0,0,0,345,346,
        1,0,0,0,346,347,1,0,0,0,347,349,5,46,0,0,348,350,3,83,41,0,349,348,
        1,0,0,0,350,351,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,354,
        1,0,0,0,353,330,1,0,0,0,353,345,1,0,0,0,354,94,1,0,0,0,355,356,5,
        48,0,0,356,359,7,25,0,0,357,360,7,26,0,0,358,360,3,83,41,0,359,357,
        1,0,0,0,359,358,1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,
        1,0,0,0,362,96,1,0,0,0,363,364,5,48,0,0,364,366,7,3,0,0,365,367,
        7,27,0,0,366,365,1,0,0,0,367,368,1,0,0,0,368,366,1,0,0,0,368,369,
        1,0,0,0,369,98,1,0,0,0,370,373,3,67,33,0,371,374,3,89,44,0,372,374,
        2,48,49,0,373,371,1,0,0,0,373,372,1,0,0,0,374,386,1,0,0,0,375,379,
        3,75,37,0,376,378,5,32,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,377,
        1,0,0,0,379,380,1,0,0,0,380,384,1,0,0,0,381,379,1,0,0,0,382,385,
        3,89,44,0,383,385,2,48,49,0,384,382,1,0,0,0,384,383,1,0,0,0,385,
        387,1,0,0,0,386,375,1,0,0,0,386,387,1,0,0,0,387,388,1,0,0,0,388,
        389,3,69,34,0,389,390,7,9,0,0,390,406,1,0,0,0,391,392,3,93,46,0,
        392,393,3,75,37,0,393,394,3,93,46,0,394,395,7,9,0,0,395,406,1,0,
        0,0,396,406,3,87,43,0,397,399,3,85,42,0,398,397,1,0,0,0,398,399,
        1,0,0,0,399,402,1,0,0,0,400,403,3,89,44,0,401,403,2,48,49,0,402,
        400,1,0,0,0,402,401,1,0,0,0,403,404,1,0,0,0,404,406,7,9,0,0,405,
        370,1,0,0,0,405,391,1,0,0,0,405,396,1,0,0,0,405,398,1,0,0,0,406,
        100,1,0,0,0,407,453,3,99,49,0,408,409,3,67,33,0,409,421,3,99,49,
        0,410,414,3,75,37,0,411,413,5,32,0,0,412,411,1,0,0,0,413,416,1,0,
        0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,417,1,0,0,0,416,414,1,0,
        0,0,417,418,3,99,49,0,418,420,1,0,0,0,419,410,1,0,0,0,420,423,1,
        0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,1,
        0,0,0,424,425,3,69,34,0,425,453,1,0,0,0,426,427,3,67,33,0,427,437,
        3,91,45,0,428,432,3,75,37,0,429,431,5,32,0,0,430,429,1,0,0,0,431,
        434,1,0,0,0,432,430,1,0,0,0,432,433,1,0,0,0,433,435,1,0,0,0,434,
        432,1,0,0,0,435,436,3,91,45,0,436,438,1,0,0,0,437,428,1,0,0,0,437,
        438,1,0,0,0,438,439,1,0,0,0,439,440,3,69,34,0,440,441,7,9,0,0,441,
        453,1,0,0,0,442,444,3,85,42,0,443,442,1,0,0,0,443,444,1,0,0,0,444,
        446,1,0,0,0,445,447,3,83,41,0,446,445,1,0,0,0,447,448,1,0,0,0,448,
        446,1,0,0,0,448,449,1,0,0,0,449,450,1,0,0,0,450,451,7,9,0,0,451,
        453,1,0,0,0,452,407,1,0,0,0,452,408,1,0,0,0,452,426,1,0,0,0,452,
        443,1,0,0,0,453,102,1,0,0,0,454,455,3,107,53,0,455,456,7,9,0,0,456,
        104,1,0,0,0,457,459,7,28,0,0,458,457,1,0,0,0,459,460,1,0,0,0,460,
        458,1,0,0,0,460,461,1,0,0,0,461,106,1,0,0,0,462,470,5,34,0,0,463,
        464,5,92,0,0,464,469,9,0,0,0,465,466,5,34,0,0,466,469,5,34,0,0,467,
        469,8,29,0,0,468,463,1,0,0,0,468,465,1,0,0,0,468,467,1,0,0,0,469,
        472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,
        470,1,0,0,0,473,474,5,34,0,0,474,108,1,0,0,0,475,477,7,30,0,0,476,
        475,1,0,0,0,477,478,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,
        482,1,0,0,0,480,482,3,77,38,0,481,476,1,0,0,0,481,480,1,0,0,0,482,
        483,1,0,0,0,483,484,6,54,0,0,484,110,1,0,0,0,485,487,5,13,0,0,486,
        485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,489,5,10,0,0,489,
        112,1,0,0,0,36,0,275,286,289,318,322,327,330,335,341,345,351,353,
        359,361,368,373,379,384,386,398,402,405,414,421,432,437,443,448,
        452,460,468,470,478,481,486,1,6,0,0
    ]

class qutes_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_TYPE = 1
    BOOL_TYPE = 2
    STRING_TYPE = 3
    QUBIT_TYPE = 4
    QUINT_TYPE = 5
    QUSTRING_TYPE = 6
    FLOAT_TYPE = 7
    VOID_TYPE = 8
    RETURN = 9
    ADD = 10
    SUB = 11
    NOT = 12
    PAULIY = 13
    PAULIZ = 14
    HADAMARD = 15
    MEASURE = 16
    PRINT = 17
    EQUAL = 18
    GREATER = 19
    GREATEREQUAL = 20
    LOWER = 21
    LOWEREQUAL = 22
    ASSIGN = 23
    END_OF_STATEMENT = 24
    VAR_STATEMENT = 25
    IF_STATEMENT = 26
    ELSE_STATEMENT = 27
    WHILE_STATEMENT = 28
    DO_STATEMENT = 29
    CURLY_PARENTHESIS_OPEN = 30
    CURLY_PARENTHESIS_CLOSE = 31
    ROUND_PARENTHESIS_OPEN = 32
    ROUND_PARENTHESIS_CLOSE = 33
    SQUARE_PARENTHESIS_OPEN = 34
    SQUARE_PARENTHESIS_CLOSE = 35
    DOT = 36
    STRING_ENCLOSURE = 37
    COMMA = 38
    BOOL_LITERAL = 39
    INT_LITERAL = 40
    FLOAT_LITERAL = 41
    HEX_LITERAL = 42
    BIN_LITERAL = 43
    QUBIT_LITERAL = 44
    QUINT_LITERAL = 45
    QUSTRING_LITERAL = 46
    SYMBOL_LITERAL = 47
    STRING_LITERAL = 48
    WS = 49
    NEWLINE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'bool'", "'string'", "'qubit'", "'quint'", "'qustring'", 
            "'float'", "'void'", "'return'", "'+'", "'-'", "'not'", "'pauliy'", 
            "'pauliz'", "'hadamard'", "'measure'", "'print'", "'=='", "'>'", 
            "'>='", "'<'", "'<='", "'='", "';'", "'var'", "'if'", "'else'", 
            "'while'", "'do'", "'{'", "'}'", "'('", "')'", "'['", "']'", 
            "'.'", "'\"'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", "QUINT_TYPE", 
            "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", "RETURN", "ADD", 
            "SUB", "NOT", "PAULIY", "PAULIZ", "HADAMARD", "MEASURE", "PRINT", 
            "EQUAL", "GREATER", "GREATEREQUAL", "LOWER", "LOWEREQUAL", "ASSIGN", 
            "END_OF_STATEMENT", "VAR_STATEMENT", "IF_STATEMENT", "ELSE_STATEMENT", 
            "WHILE_STATEMENT", "DO_STATEMENT", "CURLY_PARENTHESIS_OPEN", 
            "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", "ROUND_PARENTHESIS_CLOSE", 
            "SQUARE_PARENTHESIS_OPEN", "SQUARE_PARENTHESIS_CLOSE", "DOT", 
            "STRING_ENCLOSURE", "COMMA", "BOOL_LITERAL", "INT_LITERAL", 
            "FLOAT_LITERAL", "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", 
            "QUINT_LITERAL", "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
            "WS", "NEWLINE" ]

    ruleNames = [ "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", 
                  "QUINT_TYPE", "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", 
                  "RETURN", "ADD", "SUB", "NOT", "PAULIY", "PAULIZ", "HADAMARD", 
                  "MEASURE", "PRINT", "EQUAL", "GREATER", "GREATEREQUAL", 
                  "LOWER", "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", "VAR_STATEMENT", 
                  "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
                  "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
                  "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
                  "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", 
                  "COMMA", "COMMENT", "TRUE", "FALSE", "DIGIT", "MATH_SIGN", 
                  "QUBIT_STANDARD", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", 
                  "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
                  "WS", "NEWLINE" ]

    grammarFileName = "qutes_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


