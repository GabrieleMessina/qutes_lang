# Generated from /workspaces/qutes_lang/specification/grammar/qutes_lexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,555,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,
        1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,
        1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,
        1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,5,46,333,8,46,10,46,12,46,
        336,9,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,344,8,46,10,46,12,46,
        347,9,46,3,46,349,8,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,
        48,1,48,1,48,1,49,1,49,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,3,51,378,8,51,1,52,1,52,1,52,3,52,383,
        8,52,1,53,4,53,386,8,53,11,53,12,53,387,1,54,3,54,391,8,54,1,54,
        4,54,394,8,54,11,54,12,54,395,1,54,1,54,5,54,400,8,54,10,54,12,54,
        403,9,54,1,54,3,54,406,8,54,1,54,1,54,4,54,410,8,54,11,54,12,54,
        411,3,54,414,8,54,1,55,1,55,1,55,1,55,4,55,420,8,55,11,55,12,55,
        421,1,56,1,56,1,56,4,56,427,8,56,11,56,12,56,428,1,57,1,57,1,57,
        3,57,434,8,57,1,57,1,57,5,57,438,8,57,10,57,12,57,441,9,57,1,57,
        1,57,3,57,445,8,57,3,57,447,8,57,1,57,1,57,1,57,1,57,1,57,1,57,1,
        57,1,57,1,57,1,57,3,57,459,8,57,1,57,1,57,3,57,463,8,57,1,57,3,57,
        466,8,57,1,58,1,58,1,58,1,58,1,58,5,58,473,8,58,10,58,12,58,476,
        9,58,1,58,1,58,5,58,480,8,58,10,58,12,58,483,9,58,1,58,1,58,1,58,
        1,58,1,58,1,58,5,58,491,8,58,10,58,12,58,494,9,58,1,58,1,58,5,58,
        498,8,58,10,58,12,58,501,9,58,1,58,1,58,1,58,1,58,3,58,507,8,58,
        1,58,4,58,510,8,58,11,58,12,58,511,1,58,1,58,3,58,516,8,58,1,59,
        1,59,1,59,1,60,1,60,5,60,523,8,60,10,60,12,60,526,9,60,1,61,1,61,
        1,61,1,61,1,61,1,61,5,61,534,8,61,10,61,12,61,537,9,61,1,61,1,61,
        1,62,4,62,542,8,62,11,62,12,62,543,1,62,3,62,547,8,62,1,62,1,62,
        1,63,3,63,552,8,63,1,63,1,63,1,334,0,64,1,1,3,2,5,3,7,4,9,5,11,6,
        13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,
        18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,
        29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
        40,81,41,83,42,85,43,87,44,89,45,91,46,93,0,95,0,97,0,99,0,101,0,
        103,0,105,47,107,48,109,49,111,50,113,51,115,52,117,53,119,54,121,
        55,123,56,125,57,127,58,1,0,33,2,0,73,73,105,105,2,0,78,78,110,110,
        2,0,84,84,116,116,2,0,66,66,98,98,2,0,79,79,111,111,2,0,76,76,108,
        108,2,0,83,83,115,115,2,0,82,82,114,114,2,0,71,71,103,103,2,0,81,
        81,113,113,2,0,85,85,117,117,2,0,70,70,102,102,2,0,65,65,97,97,2,
        0,86,86,118,118,2,0,68,68,100,100,2,0,69,69,101,101,2,0,80,80,112,
        112,2,0,89,89,121,121,2,0,90,90,122,122,2,0,77,77,109,109,2,0,67,
        67,99,99,2,0,88,88,120,120,2,0,72,72,104,104,2,0,87,87,119,119,2,
        0,10,10,13,13,1,0,48,57,2,0,43,43,45,45,2,0,65,70,97,102,1,0,48,
        49,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,34,34,
        92,92,3,0,9,10,13,13,32,32,591,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,
        0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,
        0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,
        1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,125,1,0,0,0,
        0,127,1,0,0,0,1,129,1,0,0,0,3,133,1,0,0,0,5,138,1,0,0,0,7,145,1,
        0,0,0,9,151,1,0,0,0,11,157,1,0,0,0,13,166,1,0,0,0,15,172,1,0,0,0,
        17,177,1,0,0,0,19,184,1,0,0,0,21,186,1,0,0,0,23,188,1,0,0,0,25,192,
        1,0,0,0,27,199,1,0,0,0,29,206,1,0,0,0,31,213,1,0,0,0,33,217,1,0,
        0,0,35,221,1,0,0,0,37,230,1,0,0,0,39,238,1,0,0,0,41,244,1,0,0,0,
        43,252,1,0,0,0,45,255,1,0,0,0,47,257,1,0,0,0,49,260,1,0,0,0,51,262,
        1,0,0,0,53,265,1,0,0,0,55,267,1,0,0,0,57,269,1,0,0,0,59,273,1,0,
        0,0,61,277,1,0,0,0,63,284,1,0,0,0,65,287,1,0,0,0,67,293,1,0,0,0,
        69,296,1,0,0,0,71,301,1,0,0,0,73,307,1,0,0,0,75,310,1,0,0,0,77,312,
        1,0,0,0,79,314,1,0,0,0,81,316,1,0,0,0,83,318,1,0,0,0,85,320,1,0,
        0,0,87,322,1,0,0,0,89,324,1,0,0,0,91,326,1,0,0,0,93,348,1,0,0,0,
        95,350,1,0,0,0,97,355,1,0,0,0,99,361,1,0,0,0,101,363,1,0,0,0,103,
        377,1,0,0,0,105,382,1,0,0,0,107,385,1,0,0,0,109,413,1,0,0,0,111,
        415,1,0,0,0,113,423,1,0,0,0,115,465,1,0,0,0,117,515,1,0,0,0,119,
        517,1,0,0,0,121,520,1,0,0,0,123,527,1,0,0,0,125,546,1,0,0,0,127,
        551,1,0,0,0,129,130,7,0,0,0,130,131,7,1,0,0,131,132,7,2,0,0,132,
        2,1,0,0,0,133,134,7,3,0,0,134,135,7,4,0,0,135,136,7,4,0,0,136,137,
        7,5,0,0,137,4,1,0,0,0,138,139,7,6,0,0,139,140,7,2,0,0,140,141,7,
        7,0,0,141,142,7,0,0,0,142,143,7,1,0,0,143,144,7,8,0,0,144,6,1,0,
        0,0,145,146,7,9,0,0,146,147,7,10,0,0,147,148,7,3,0,0,148,149,7,0,
        0,0,149,150,7,2,0,0,150,8,1,0,0,0,151,152,7,9,0,0,152,153,7,10,0,
        0,153,154,7,0,0,0,154,155,7,1,0,0,155,156,7,2,0,0,156,10,1,0,0,0,
        157,158,7,9,0,0,158,159,7,10,0,0,159,160,7,6,0,0,160,161,7,2,0,0,
        161,162,7,7,0,0,162,163,7,0,0,0,163,164,7,1,0,0,164,165,7,8,0,0,
        165,12,1,0,0,0,166,167,7,11,0,0,167,168,7,5,0,0,168,169,7,4,0,0,
        169,170,7,12,0,0,170,171,7,2,0,0,171,14,1,0,0,0,172,173,7,13,0,0,
        173,174,7,4,0,0,174,175,7,0,0,0,175,176,7,14,0,0,176,16,1,0,0,0,
        177,178,7,7,0,0,178,179,7,15,0,0,179,180,7,2,0,0,180,181,7,10,0,
        0,181,182,7,7,0,0,182,183,7,1,0,0,183,18,1,0,0,0,184,185,5,43,0,
        0,185,20,1,0,0,0,186,187,5,45,0,0,187,22,1,0,0,0,188,189,7,1,0,0,
        189,190,7,4,0,0,190,191,7,2,0,0,191,24,1,0,0,0,192,193,7,16,0,0,
        193,194,7,12,0,0,194,195,7,10,0,0,195,196,7,5,0,0,196,197,7,0,0,
        0,197,198,7,17,0,0,198,26,1,0,0,0,199,200,7,16,0,0,200,201,7,12,
        0,0,201,202,7,10,0,0,202,203,7,5,0,0,203,204,7,0,0,0,204,205,7,18,
        0,0,205,28,1,0,0,0,206,207,7,8,0,0,207,208,7,7,0,0,208,209,7,4,0,
        0,209,210,7,13,0,0,210,211,7,15,0,0,211,212,7,7,0,0,212,30,1,0,0,
        0,213,214,7,19,0,0,214,215,7,20,0,0,215,216,7,18,0,0,216,32,1,0,
        0,0,217,218,7,19,0,0,218,219,7,20,0,0,219,220,7,21,0,0,220,34,1,
        0,0,0,221,222,7,22,0,0,222,223,7,12,0,0,223,224,7,14,0,0,224,225,
        7,12,0,0,225,226,7,19,0,0,226,227,7,12,0,0,227,228,7,7,0,0,228,229,
        7,14,0,0,229,36,1,0,0,0,230,231,7,19,0,0,231,232,7,15,0,0,232,233,
        7,12,0,0,233,234,7,6,0,0,234,235,7,10,0,0,235,236,7,7,0,0,236,237,
        7,15,0,0,237,38,1,0,0,0,238,239,7,16,0,0,239,240,7,7,0,0,240,241,
        7,0,0,0,241,242,7,1,0,0,242,243,7,2,0,0,243,40,1,0,0,0,244,245,7,
        3,0,0,245,246,7,12,0,0,246,247,7,7,0,0,247,248,7,7,0,0,248,249,7,
        0,0,0,249,250,7,15,0,0,250,251,7,7,0,0,251,42,1,0,0,0,252,253,5,
        61,0,0,253,254,5,61,0,0,254,44,1,0,0,0,255,256,5,62,0,0,256,46,1,
        0,0,0,257,258,5,62,0,0,258,259,5,61,0,0,259,48,1,0,0,0,260,261,5,
        60,0,0,261,50,1,0,0,0,262,263,5,60,0,0,263,264,5,61,0,0,264,52,1,
        0,0,0,265,266,5,61,0,0,266,54,1,0,0,0,267,268,5,59,0,0,268,56,1,
        0,0,0,269,270,7,13,0,0,270,271,7,12,0,0,271,272,7,7,0,0,272,58,1,
        0,0,0,273,274,7,11,0,0,274,275,7,4,0,0,275,276,7,7,0,0,276,60,1,
        0,0,0,277,278,7,6,0,0,278,279,7,15,0,0,279,280,7,12,0,0,280,281,
        7,7,0,0,281,282,7,20,0,0,282,283,7,22,0,0,283,62,1,0,0,0,284,285,
        7,0,0,0,285,286,7,1,0,0,286,64,1,0,0,0,287,288,7,23,0,0,288,289,
        7,22,0,0,289,290,7,15,0,0,290,291,7,7,0,0,291,292,7,15,0,0,292,66,
        1,0,0,0,293,294,7,0,0,0,294,295,7,11,0,0,295,68,1,0,0,0,296,297,
        7,15,0,0,297,298,7,5,0,0,298,299,7,6,0,0,299,300,7,15,0,0,300,70,
        1,0,0,0,301,302,7,23,0,0,302,303,7,22,0,0,303,304,7,0,0,0,304,305,
        7,5,0,0,305,306,7,15,0,0,306,72,1,0,0,0,307,308,7,14,0,0,308,309,
        7,4,0,0,309,74,1,0,0,0,310,311,5,123,0,0,311,76,1,0,0,0,312,313,
        5,125,0,0,313,78,1,0,0,0,314,315,5,40,0,0,315,80,1,0,0,0,316,317,
        5,41,0,0,317,82,1,0,0,0,318,319,5,91,0,0,319,84,1,0,0,0,320,321,
        5,93,0,0,321,86,1,0,0,0,322,323,5,46,0,0,323,88,1,0,0,0,324,325,
        5,34,0,0,325,90,1,0,0,0,326,327,5,44,0,0,327,92,1,0,0,0,328,329,
        5,47,0,0,329,330,5,42,0,0,330,334,1,0,0,0,331,333,9,0,0,0,332,331,
        1,0,0,0,333,336,1,0,0,0,334,335,1,0,0,0,334,332,1,0,0,0,335,337,
        1,0,0,0,336,334,1,0,0,0,337,338,5,42,0,0,338,349,5,47,0,0,339,340,
        5,47,0,0,340,341,5,47,0,0,341,345,1,0,0,0,342,344,8,24,0,0,343,342,
        1,0,0,0,344,347,1,0,0,0,345,343,1,0,0,0,345,346,1,0,0,0,346,349,
        1,0,0,0,347,345,1,0,0,0,348,328,1,0,0,0,348,339,1,0,0,0,349,94,1,
        0,0,0,350,351,7,2,0,0,351,352,7,7,0,0,352,353,7,10,0,0,353,354,7,
        15,0,0,354,96,1,0,0,0,355,356,7,11,0,0,356,357,7,12,0,0,357,358,
        7,5,0,0,358,359,7,6,0,0,359,360,7,15,0,0,360,98,1,0,0,0,361,362,
        7,25,0,0,362,100,1,0,0,0,363,364,7,26,0,0,364,102,1,0,0,0,365,366,
        5,124,0,0,366,367,5,48,0,0,367,378,5,62,0,0,368,369,5,124,0,0,369,
        370,5,49,0,0,370,378,5,62,0,0,371,372,5,124,0,0,372,373,5,43,0,0,
        373,378,5,62,0,0,374,375,5,124,0,0,375,376,5,45,0,0,376,378,5,62,
        0,0,377,365,1,0,0,0,377,368,1,0,0,0,377,371,1,0,0,0,377,374,1,0,
        0,0,378,104,1,0,0,0,379,383,3,95,47,0,380,383,3,97,48,0,381,383,
        2,48,49,0,382,379,1,0,0,0,382,380,1,0,0,0,382,381,1,0,0,0,383,106,
        1,0,0,0,384,386,3,99,49,0,385,384,1,0,0,0,386,387,1,0,0,0,387,385,
        1,0,0,0,387,388,1,0,0,0,388,108,1,0,0,0,389,391,3,101,50,0,390,389,
        1,0,0,0,390,391,1,0,0,0,391,393,1,0,0,0,392,394,3,99,49,0,393,392,
        1,0,0,0,394,395,1,0,0,0,395,393,1,0,0,0,395,396,1,0,0,0,396,397,
        1,0,0,0,397,401,5,46,0,0,398,400,3,99,49,0,399,398,1,0,0,0,400,403,
        1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,414,1,0,0,0,403,401,
        1,0,0,0,404,406,3,101,50,0,405,404,1,0,0,0,405,406,1,0,0,0,406,407,
        1,0,0,0,407,409,5,46,0,0,408,410,3,99,49,0,409,408,1,0,0,0,410,411,
        1,0,0,0,411,409,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,390,
        1,0,0,0,413,405,1,0,0,0,414,110,1,0,0,0,415,416,5,48,0,0,416,419,
        7,21,0,0,417,420,7,27,0,0,418,420,3,99,49,0,419,417,1,0,0,0,419,
        418,1,0,0,0,420,421,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,
        112,1,0,0,0,423,424,5,48,0,0,424,426,7,3,0,0,425,427,7,28,0,0,426,
        425,1,0,0,0,427,428,1,0,0,0,428,426,1,0,0,0,428,429,1,0,0,0,429,
        114,1,0,0,0,430,433,3,83,41,0,431,434,3,105,52,0,432,434,2,48,49,
        0,433,431,1,0,0,0,433,432,1,0,0,0,434,446,1,0,0,0,435,439,3,91,45,
        0,436,438,5,32,0,0,437,436,1,0,0,0,438,441,1,0,0,0,439,437,1,0,0,
        0,439,440,1,0,0,0,440,444,1,0,0,0,441,439,1,0,0,0,442,445,3,105,
        52,0,443,445,2,48,49,0,444,442,1,0,0,0,444,443,1,0,0,0,445,447,1,
        0,0,0,446,435,1,0,0,0,446,447,1,0,0,0,447,448,1,0,0,0,448,449,3,
        85,42,0,449,450,7,9,0,0,450,466,1,0,0,0,451,452,3,109,54,0,452,453,
        3,91,45,0,453,454,3,109,54,0,454,455,7,9,0,0,455,466,1,0,0,0,456,
        466,3,103,51,0,457,459,3,101,50,0,458,457,1,0,0,0,458,459,1,0,0,
        0,459,462,1,0,0,0,460,463,3,105,52,0,461,463,2,48,49,0,462,460,1,
        0,0,0,462,461,1,0,0,0,463,464,1,0,0,0,464,466,7,9,0,0,465,430,1,
        0,0,0,465,451,1,0,0,0,465,456,1,0,0,0,465,458,1,0,0,0,466,116,1,
        0,0,0,467,516,3,115,57,0,468,469,3,83,41,0,469,481,3,115,57,0,470,
        474,3,91,45,0,471,473,5,32,0,0,472,471,1,0,0,0,473,476,1,0,0,0,474,
        472,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,474,1,0,0,0,477,
        478,3,115,57,0,478,480,1,0,0,0,479,470,1,0,0,0,480,483,1,0,0,0,481,
        479,1,0,0,0,481,482,1,0,0,0,482,484,1,0,0,0,483,481,1,0,0,0,484,
        485,3,85,42,0,485,516,1,0,0,0,486,487,3,83,41,0,487,499,3,107,53,
        0,488,492,3,91,45,0,489,491,5,32,0,0,490,489,1,0,0,0,491,494,1,0,
        0,0,492,490,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,492,1,0,
        0,0,495,496,3,107,53,0,496,498,1,0,0,0,497,488,1,0,0,0,498,501,1,
        0,0,0,499,497,1,0,0,0,499,500,1,0,0,0,500,502,1,0,0,0,501,499,1,
        0,0,0,502,503,3,85,42,0,503,504,7,9,0,0,504,516,1,0,0,0,505,507,
        3,101,50,0,506,505,1,0,0,0,506,507,1,0,0,0,507,509,1,0,0,0,508,510,
        3,99,49,0,509,508,1,0,0,0,510,511,1,0,0,0,511,509,1,0,0,0,511,512,
        1,0,0,0,512,513,1,0,0,0,513,514,7,9,0,0,514,516,1,0,0,0,515,467,
        1,0,0,0,515,468,1,0,0,0,515,486,1,0,0,0,515,506,1,0,0,0,516,118,
        1,0,0,0,517,518,3,123,61,0,518,519,7,9,0,0,519,120,1,0,0,0,520,524,
        7,29,0,0,521,523,7,30,0,0,522,521,1,0,0,0,523,526,1,0,0,0,524,522,
        1,0,0,0,524,525,1,0,0,0,525,122,1,0,0,0,526,524,1,0,0,0,527,535,
        5,34,0,0,528,529,5,92,0,0,529,534,9,0,0,0,530,531,5,34,0,0,531,534,
        5,34,0,0,532,534,8,31,0,0,533,528,1,0,0,0,533,530,1,0,0,0,533,532,
        1,0,0,0,534,537,1,0,0,0,535,533,1,0,0,0,535,536,1,0,0,0,536,538,
        1,0,0,0,537,535,1,0,0,0,538,539,5,34,0,0,539,124,1,0,0,0,540,542,
        7,32,0,0,541,540,1,0,0,0,542,543,1,0,0,0,543,541,1,0,0,0,543,544,
        1,0,0,0,544,547,1,0,0,0,545,547,3,93,46,0,546,541,1,0,0,0,546,545,
        1,0,0,0,547,548,1,0,0,0,548,549,6,62,0,0,549,126,1,0,0,0,550,552,
        5,13,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,0,553,554,
        5,10,0,0,554,128,1,0,0,0,36,0,334,345,348,377,382,387,390,395,401,
        405,411,413,419,421,428,433,439,444,446,458,462,465,474,481,492,
        499,506,511,515,524,533,535,543,546,551,1,6,0,0
    ]

class qutes_lexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INT_TYPE = 1
    BOOL_TYPE = 2
    STRING_TYPE = 3
    QUBIT_TYPE = 4
    QUINT_TYPE = 5
    QUSTRING_TYPE = 6
    FLOAT_TYPE = 7
    VOID_TYPE = 8
    RETURN = 9
    ADD = 10
    SUB = 11
    NOT = 12
    PAULIY = 13
    PAULIZ = 14
    GROVER = 15
    MCZ = 16
    MCX = 17
    HADAMARD = 18
    MEASURE = 19
    PRINT = 20
    BARRIER = 21
    EQUAL = 22
    GREATER = 23
    GREATEREQUAL = 24
    LOWER = 25
    LOWEREQUAL = 26
    ASSIGN = 27
    END_OF_STATEMENT = 28
    VAR_STATEMENT = 29
    FOR_STATEMENT = 30
    SEARCH_STATEMENT = 31
    IN_STATEMENT = 32
    WHERE_STATEMENT = 33
    IF_STATEMENT = 34
    ELSE_STATEMENT = 35
    WHILE_STATEMENT = 36
    DO_STATEMENT = 37
    CURLY_PARENTHESIS_OPEN = 38
    CURLY_PARENTHESIS_CLOSE = 39
    ROUND_PARENTHESIS_OPEN = 40
    ROUND_PARENTHESIS_CLOSE = 41
    SQUARE_PARENTHESIS_OPEN = 42
    SQUARE_PARENTHESIS_CLOSE = 43
    DOT = 44
    STRING_ENCLOSURE = 45
    COMMA = 46
    BOOL_LITERAL = 47
    INT_LITERAL = 48
    FLOAT_LITERAL = 49
    HEX_LITERAL = 50
    BIN_LITERAL = 51
    QUBIT_LITERAL = 52
    QUINT_LITERAL = 53
    QUSTRING_LITERAL = 54
    SYMBOL_LITERAL = 55
    STRING_LITERAL = 56
    WS = 57
    NEWLINE = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'int'", "'bool'", "'string'", "'qubit'", "'quint'", "'qustring'", 
            "'float'", "'void'", "'return'", "'+'", "'-'", "'not'", "'pauliy'", 
            "'pauliz'", "'grover'", "'mcz'", "'mcx'", "'hadamard'", "'measure'", 
            "'print'", "'barrier'", "'=='", "'>'", "'>='", "'<'", "'<='", 
            "'='", "';'", "'var'", "'for'", "'search'", "'in'", "'where'", 
            "'if'", "'else'", "'while'", "'do'", "'{'", "'}'", "'('", "')'", 
            "'['", "']'", "'.'", "'\"'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", "QUINT_TYPE", 
            "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", "RETURN", "ADD", 
            "SUB", "NOT", "PAULIY", "PAULIZ", "GROVER", "MCZ", "MCX", "HADAMARD", 
            "MEASURE", "PRINT", "BARRIER", "EQUAL", "GREATER", "GREATEREQUAL", 
            "LOWER", "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", "VAR_STATEMENT", 
            "FOR_STATEMENT", "SEARCH_STATEMENT", "IN_STATEMENT", "WHERE_STATEMENT", 
            "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
            "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
            "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", "SQUARE_PARENTHESIS_CLOSE", 
            "DOT", "STRING_ENCLOSURE", "COMMA", "BOOL_LITERAL", "INT_LITERAL", 
            "FLOAT_LITERAL", "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", 
            "QUINT_LITERAL", "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
            "WS", "NEWLINE" ]

    ruleNames = [ "INT_TYPE", "BOOL_TYPE", "STRING_TYPE", "QUBIT_TYPE", 
                  "QUINT_TYPE", "QUSTRING_TYPE", "FLOAT_TYPE", "VOID_TYPE", 
                  "RETURN", "ADD", "SUB", "NOT", "PAULIY", "PAULIZ", "GROVER", 
                  "MCZ", "MCX", "HADAMARD", "MEASURE", "PRINT", "BARRIER", 
                  "EQUAL", "GREATER", "GREATEREQUAL", "LOWER", "LOWEREQUAL", 
                  "ASSIGN", "END_OF_STATEMENT", "VAR_STATEMENT", "FOR_STATEMENT", 
                  "SEARCH_STATEMENT", "IN_STATEMENT", "WHERE_STATEMENT", 
                  "IF_STATEMENT", "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", 
                  "CURLY_PARENTHESIS_OPEN", "CURLY_PARENTHESIS_CLOSE", "ROUND_PARENTHESIS_OPEN", 
                  "ROUND_PARENTHESIS_CLOSE", "SQUARE_PARENTHESIS_OPEN", 
                  "SQUARE_PARENTHESIS_CLOSE", "DOT", "STRING_ENCLOSURE", 
                  "COMMA", "COMMENT", "TRUE", "FALSE", "DIGIT", "MATH_SIGN", 
                  "QUBIT_STANDARD", "BOOL_LITERAL", "INT_LITERAL", "FLOAT_LITERAL", 
                  "HEX_LITERAL", "BIN_LITERAL", "QUBIT_LITERAL", "QUINT_LITERAL", 
                  "QUSTRING_LITERAL", "SYMBOL_LITERAL", "STRING_LITERAL", 
                  "WS", "NEWLINE" ]

    grammarFileName = "qutes_lexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


