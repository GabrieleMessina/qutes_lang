# Generated from /workspaces/qutes_lang/qutes.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,23,146,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,1,0,1,1,1,1,1,2,1,
        2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,
        9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,19,1,19,1,19,1,19,5,19,104,8,19,10,19,12,19,107,9,19,
        1,19,1,19,1,19,1,19,1,19,1,19,5,19,115,8,19,10,19,12,19,118,9,19,
        3,19,120,8,19,1,20,4,20,123,8,20,11,20,12,20,124,1,21,4,21,128,8,
        21,11,21,12,21,129,1,22,4,22,133,8,22,11,22,12,22,134,1,22,3,22,
        138,8,22,1,22,1,22,1,23,3,23,143,8,23,1,23,1,23,1,105,0,24,1,1,3,
        2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,0,41,20,43,21,45,22,47,23,1,0,4,
        2,0,10,10,13,13,1,0,48,57,2,0,65,90,97,122,3,0,9,10,13,13,32,32,
        152,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,1,49,1,0,0,0,3,51,1,0,0,0,
        5,53,1,0,0,0,7,55,1,0,0,0,9,57,1,0,0,0,11,60,1,0,0,0,13,62,1,0,0,
        0,15,65,1,0,0,0,17,67,1,0,0,0,19,70,1,0,0,0,21,72,1,0,0,0,23,74,
        1,0,0,0,25,77,1,0,0,0,27,82,1,0,0,0,29,88,1,0,0,0,31,91,1,0,0,0,
        33,93,1,0,0,0,35,95,1,0,0,0,37,97,1,0,0,0,39,119,1,0,0,0,41,122,
        1,0,0,0,43,127,1,0,0,0,45,137,1,0,0,0,47,142,1,0,0,0,49,50,5,40,
        0,0,50,2,1,0,0,0,51,52,5,41,0,0,52,4,1,0,0,0,53,54,5,43,0,0,54,6,
        1,0,0,0,55,56,5,45,0,0,56,8,1,0,0,0,57,58,5,61,0,0,58,59,5,61,0,
        0,59,10,1,0,0,0,60,61,5,62,0,0,61,12,1,0,0,0,62,63,5,62,0,0,63,64,
        5,61,0,0,64,14,1,0,0,0,65,66,5,60,0,0,66,16,1,0,0,0,67,68,5,60,0,
        0,68,69,5,61,0,0,69,18,1,0,0,0,70,71,5,61,0,0,71,20,1,0,0,0,72,73,
        5,59,0,0,73,22,1,0,0,0,74,75,5,105,0,0,75,76,5,102,0,0,76,24,1,0,
        0,0,77,78,5,101,0,0,78,79,5,108,0,0,79,80,5,115,0,0,80,81,5,101,
        0,0,81,26,1,0,0,0,82,83,5,119,0,0,83,84,5,104,0,0,84,85,5,105,0,
        0,85,86,5,108,0,0,86,87,5,101,0,0,87,28,1,0,0,0,88,89,5,100,0,0,
        89,90,5,111,0,0,90,30,1,0,0,0,91,92,5,123,0,0,92,32,1,0,0,0,93,94,
        5,125,0,0,94,34,1,0,0,0,95,96,5,34,0,0,96,36,1,0,0,0,97,98,5,0,0,
        1,98,38,1,0,0,0,99,100,5,47,0,0,100,101,5,42,0,0,101,105,1,0,0,0,
        102,104,9,0,0,0,103,102,1,0,0,0,104,107,1,0,0,0,105,106,1,0,0,0,
        105,103,1,0,0,0,106,108,1,0,0,0,107,105,1,0,0,0,108,109,5,42,0,0,
        109,120,5,47,0,0,110,111,5,47,0,0,111,112,5,47,0,0,112,116,1,0,0,
        0,113,115,8,0,0,0,114,113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,
        0,116,117,1,0,0,0,117,120,1,0,0,0,118,116,1,0,0,0,119,99,1,0,0,0,
        119,110,1,0,0,0,120,40,1,0,0,0,121,123,7,1,0,0,122,121,1,0,0,0,123,
        124,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,42,1,0,0,0,126,128,
        7,2,0,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,0,129,130,
        1,0,0,0,130,44,1,0,0,0,131,133,7,3,0,0,132,131,1,0,0,0,133,134,1,
        0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,138,1,0,0,0,136,138,3,
        39,19,0,137,132,1,0,0,0,137,136,1,0,0,0,138,139,1,0,0,0,139,140,
        6,22,0,0,140,46,1,0,0,0,141,143,5,13,0,0,142,141,1,0,0,0,142,143,
        1,0,0,0,143,144,1,0,0,0,144,145,5,10,0,0,145,48,1,0,0,0,9,0,105,
        116,119,124,129,134,137,142,1,6,0,0
    ]

class qutesLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    ADD = 3
    SUB = 4
    EQUAL = 5
    GREATER = 6
    GREATEREQUAL = 7
    LOWER = 8
    LOWEREQUAL = 9
    ASSIGN = 10
    END_OF_STATEMENT = 11
    IF_STATEMENT = 12
    ELSE_STATEMENT = 13
    WHILE_STATEMENT = 14
    DO_STATEMENT = 15
    BLOCK_STATEMENT_START = 16
    BLOCK_STATEMENT_END = 17
    STRING_ENCLOSURE = 18
    END_OF_PROGRAM = 19
    INT = 20
    STRING = 21
    WS = 22
    NEWLINE = 23

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'=='", "'>'", "'>='", "'<'", "'<='", 
            "'='", "';'", "'if'", "'else'", "'while'", "'do'", "'{'", "'}'", 
            "'\"'" ]

    symbolicNames = [ "<INVALID>",
            "ADD", "SUB", "EQUAL", "GREATER", "GREATEREQUAL", "LOWER", "LOWEREQUAL", 
            "ASSIGN", "END_OF_STATEMENT", "IF_STATEMENT", "ELSE_STATEMENT", 
            "WHILE_STATEMENT", "DO_STATEMENT", "BLOCK_STATEMENT_START", 
            "BLOCK_STATEMENT_END", "STRING_ENCLOSURE", "END_OF_PROGRAM", 
            "INT", "STRING", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "ADD", "SUB", "EQUAL", "GREATER", "GREATEREQUAL", 
                  "LOWER", "LOWEREQUAL", "ASSIGN", "END_OF_STATEMENT", "IF_STATEMENT", 
                  "ELSE_STATEMENT", "WHILE_STATEMENT", "DO_STATEMENT", "BLOCK_STATEMENT_START", 
                  "BLOCK_STATEMENT_END", "STRING_ENCLOSURE", "END_OF_PROGRAM", 
                  "COMMENT", "INT", "STRING", "WS", "NEWLINE" ]

    grammarFileName = "qutes.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


