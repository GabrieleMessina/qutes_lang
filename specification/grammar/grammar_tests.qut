//basic boolean 
/*{
    bool a = true;
    bool b = FALSE;
    bool c = 1;
    bool d = 0;
}*/

//basic integer
/*{
    int a=2+3;
    int i=1;
    int x=0xa1;//TODO:handle
    int h=0b01;//TODO:handle
    a;
    i=i+i;
    //2+"a"; //this gives an error and that it's as intended, it's how the lower level language handle this kind of operation between two types.
    int z = true;
    int zz = 10;
    z + zz;

    not z;
    not zz;
    not 0;
}*/

//strings and basic operations
/*{
    string a;
    string b = "aa";
    string c = "aa\"" + "as";
    int d = 12 + 16543;
    //int e = 12-16543;
    int e = 12 - 16543;
    int f = false + false;
    int g = true + true;
    //int b.b = 1; //this gives error, because variable cannot be declared with qualified names (at least at the moment)
    //b = 4; //this gives an error, wrong type assignment and no conversion available.
    //g = 4; //this gives an error, g is not declared.
}*/

//variable scope tests
//if(1){ int a=100; } //TODO: handle branching
//{ ; }
//{ }
//qubit b;
//float a = 1.1;
//{ int i=1; while (i<100) i=i+i; } //TODO: handle cycle

//qubits tests
/*{
    //alpha and beta values
    qubit a = 0.7,0.3q;
    //states we want the qubit is able to take
    qubit b = [0, 1]q; 
    //qubits with only a state 
    qubit c = [1]q; 
    qubit ad = 0q;
    // qubit ae = 1q;
    // qubit bd = -0q;
    // qubit be = +1q;
    // be = -1q;
    //qubits in superposition 
    qubit f = |+> ;
    qubit g = |-> ;
    qubit h = |0> ;
    qubit i = |1> ;
    not i;
    pauliz f;
    hadamard g;
    f + g;
    // qubit hx = f + g; //TODO: handle assignment after expression
}*/

//quints tests
/*{
    
    //qubit a = [0,1]q;
    //not a;
    //qubit b = 0q;
    //a + b;
    
    //qubit a = [1]q;
    //qubit b = [1]q;
    //a + b;
    //quint x = a + b;
    
    //qubit ax = 1q;
    //quint c = 10q;
    //quint d = 4q;
    //quint re = c + d;
    //c + d + ax; //TODO: handle multiple quantum variable sum

    //quint aa = [0q, 0q, 1q]; //quint representing the number 1
    //quint bb = [[0, 1]q, 0q, 1q]; //quint with a superposition state where the most significant bit can be 0(50%) or 1(50%)
    //quint cc = [0.7,0.3q, 0q, 1q]; //quint with a superposition state where the most significant bit can be 0(70%) or 1(30%)
    //quint dd = [1, 3]q; //quint with a superposition state that can be both 1(50%) or 3(50%)
    //quint d = -12q; //TODO: handle negative numbers (two's complement?)
}*/