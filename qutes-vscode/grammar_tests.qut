//basic boolean 
{
    bool a = true;
    bool a = false;
    bool b = FALSE;
    bool b = TRUE;
    bool c = 1;
    bool d = 0;
}

//basic integer
{
    int a=2+3;
    int i=1;
    int i=6546511654564684561;
    //int x=0xa1;//TODO:handle
    //int h=0b01;//TODO:handle
}

//strings and basic operations
{
    string a;
    string b = "aa";
    string bb = b;
    string c = "aa\"" + "as";
    int d = 12 + 16543;
    int e = 12-16543;
    int e = 12 - 16543;
    int f = false + false;
    int g = true + true;
}

//variable scope tests
{
    bool b = (0);
    if(b){ int a = 100; }
    if(false){
        int c = 34;
    }
    else{
        int d = 6;
    }

    { ; }
    { }
}
//Miscellaneous
{
    qubit qu = 0q;
    quint num = 1q;
    num = 10q;
    while(i<3){
        i=i+1;
        hadamard qu;
    }
    if(number>0){
        print "positive";
    }
    else{
        print "not positive";
    }
}

//qubits tests
{
    //alpha and beta values
    qubit a = 0.7,0.3q;
    //states we want the qubit is able to take
    qubit b = [0, 1]q; 
    //qubits with only a state 
    qubit c = [1]q; 
    qubit ad = [1,2]q;
   
    //qubits in superposition 
    qubit f = |+>;
    qubit g = |->;
    qubit h = |0>;
    qubit i = |1>;
    not i;
    pauliz f;
    hadamard g;
    f + g;
    qubit hx = f + g;
    measure hx;
}

//quints tests
{   
    qubit ax = 1q;
    quint c = 10q;
    quint d = 4q;
    quint re = c + d;
    c + d + ax;

    quint aa = [0q, 0q, 1q]; //quint representing the number 1
    quint bb = [[0, 1]q, 0q, 1q]; //quint with a superposition state where the most significant bit can be 0(50%) or 1(50%)
    quint cc = [0.7,0.3q, 0q, 1q]; //quint with a superposition state where the most significant bit can be 0(70%) or 1(30%)
    quint dd = [1, 3]q; //quint with a superposition state that can be both 1(50%) or 3(50%)
    quint d = -12q;
}

//Functions tests I
{
    bool A (int c = 10){
        bool a = false;
        return a;
        print a; //TODO: gray out unreachable code
    }

    bool z = A();

    void B (){
        bool z = A();
        print z;
    }

    B();
}

//Grover
{
    qustring a = "1110111";
    if("0" in a){
        print "Trovato!";
    }
    else{
        print "Non Trovato";
    }
}